<?xml version="1.0" encoding="UTF-8"?>
<project name="gpfusion" default="all" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property file="build.properties" />

	<!-- Compiler options -->
	<property name="name" value="gpfusion" />
	<property name="gpfusion.version" value="2.0.0" />
	<property name="gphd.version" value="2.0.0.0" />
	<property name="version" value="${gpfusion.version}-gphd-${gphd.version}" />
	<property name="final.name" value="${name}-${version}" />

	<property name="src.dir" value="${basedir}" />
	<property name="lib.dir" value="${basedir}/build/lib" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="dist.dir" value="${build.dir}/${final.name}" />
	<property name="package.buildroot" value="/tmp/gpfusion_package_build_${user.name}"/>
	<property name="package.release" value="gphd_${gphd.version}"/>
	<property name="package.prefix" value="/usr/lib/gphd"/>

	<!--Apache Ivy(http://ant.apache.org/ivy/history/latest-milestone/install.html) -->
	<loadproperties srcfile="${basedir}/ivy/libraries.properties" />
	<property name="build.ivy.lib.dir" value="${build.dir}/lib" />
	<property name="ivy.artifact.retrieve.pattern" value="[artifact]-[revision].[ext]" />
	<property name="ivy.install.version" value="2.2.0" />
	<condition property="ivy.home" value="${env.IVY_HOME}">
		<isset property="env.IVY_HOME" />
	</condition>
	<property name="ivy.home" value="${user.home}/.ant" />
	<property name="ivy.jar.dir" value="${ivy.home}/lib" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

	<patternset id="library.patterns">
		<include name="hadoop-${hadoop.version}/*.jar" />
		<include name="*.jar" />
	</patternset>


	<!-- Project Libraries -->

	<path id="pig.classpath">
		<fileset file="${lib.dir}/hadoop-${hadoop.version}/pig-*-core.jar" />
	</path>

	<path id="library.commons.classpath">

		<!-- sort the files in reversed name order. We need to put -->
		<!-- avro-tools behind hadoop in the class path since it   -->
		<!-- includes hadoop and breaks the build otherwise...     -->
		<sort>
			<fileset dir="${lib.dir}" />
			<reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
				<name />
			</reverse>
		</sort>

		<fileset dir="${lib.dir}">
			<patternset refid="library.patterns" />
		</fileset>	

		<path refid="ivy-classpath" />
	</path>

	<target name="init" description="Build initialization">
	</target>

	<target name="clean">
		<delete dir="${build.dir}"/>
	</target>

	<target name="compile" depends="ivy-retrieve-hadoop">
		<mkdir dir="${build.dir}/classes" />

		<!-- display the classpath used for compiling -->
		<property name="myclasspath" refid="library.commons.classpath"/>
		<!-- enable the following line to echo classpath -->
		<!-- echo message="classpath used in javac target: ${myclasspath}"/-->

		<!-- compile the core gpdhfs connector source -->
		<javac classpathref="library.commons.classpath"
			destdir="${build.dir}/classes"
			includeantruntime="${compiler.includeantruntime}"
			debug="${compiler.debug}"
			deprecation="${compiler.deprecation}"
			fork="yes"
			verbose="${compiler.verbose}"
			memoryMaximumSize="${compiler.max.memory}"
			srcdir="${src.dir}">
			<compilerarg line="-Werror -Xlint:unchecked -Xlint:deprecation -Xlint:finally -Xlint:fallthrough -Xlint:path"/>
		</javac>

	</target>

	<target name="jar" depends="compile" description="create the main jar files">
		<jar destfile="${build.dir}/${final.name}.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Built-Date" value="${TODAY}"/> 
			</manifest>
			<fileset dir="${build.dir}/classes" includes="**/*.class" excludes="Protobuf*.class"/>
		</jar>

		<jar destfile="${build.dir}/protobuf-appendix.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Built-Date" value="${TODAY}"/> 
			</manifest>
			<fileset dir="${build.dir}/classes" includes="Protobuf*.class"/>
		</jar>
	</target>

	<target name="all" depends="jar" description="build all jar files" />

	<!-- Ivy -->
	<target name="ivy-probe-antlib">
		<condition property="ivy.found">
			<typefound uri="antlib:org.apache.ivy.ant" name="cleancache" />
		</condition>
	</target>

	<target name="download-ivy" unless="offline">
		<mkdir dir="${ivy.jar.dir}" />
		<get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" />
	</target>

	<target name="ivy-init" depends="download-ivy">
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<target name="ivy-retrieve-hadoop" depends="ivy-init"
		description="--> Retrieve Ivy-managed artifacts for the compile configurations">
		<ivy:settings id="basic.settings" file="ivysettings.xml"/>
		<ivy:retrieve settingsRef="basic.settings" pattern="${build.ivy.lib.dir}/${ivy.artifact.retrieve.pattern}" sync="true" conf="compile"/>
		<ivy:cachepath pathid="ivy-classpath" conf="compile"/>
	</target>

	<target name="ivy-retrieve-checkstyle"
		description="Retrieve Ivy-managed artifacts for the checkstyle configurations">
		<ivy:retrieve pattern="${build.ivy.lib.dir}/${ivy.artifact.retrieve.pattern}"/>
		<ivy:cachepath pathid="checkstyle-classpath" conf="checkstyle"/>
	</target>

	<!-- ================================================================== -->
	<!-- Run optional third-party tool targets                              --> 
	<!-- ================================================================== -->

	<target name="checkstyle" depends="ivy-retrieve-checkstyle,check-for-checkstyle" if="checkstyle.present" description="Run optional third-party tool targets">
		<taskdef resource="checkstyletask.properties">
			<classpath refid="checkstyle-classpath"/>
		</taskdef>

		<mkdir dir="${test.build.dir}"/>

		<checkstyle config="${test.src.dir}/sun_checks.xml"
			failOnViolation="false">
			<fileset dir="${src.dir}" includes="*.java"/>
			<formatter type="xml" toFile="${test.build.dir}/checkstyle-errors.xml"/>
		</checkstyle>

		<xslt style="${test.src.dir}/checkstyle-noframes-sorted.xsl"
			in="${test.build.dir}/checkstyle-errors.xml"
			out="${test.build.dir}/checkstyle-errors.html"/>
	</target>

	<target name="check-for-checkstyle">
		<available property="checkstyle.present" resource="checkstyletask.properties">
			<classpath refid="checkstyle-classpath"/>
		</available>  	
	</target>

	<target name="package" depends="jar" description="create a package directory">
		<delete dir="${dist.dir}"/>
		<mkdir dir="${dist.dir}"/>
		<copy todir="${dist.dir}">
			<fileset dir="${lib.dir}">
				<include name="avro*.jar"/>
				<include name="jackson*.jar"/>  
				<include name="protobuf*.jar"/>      
			</fileset>
			<fileset dir="${build.dir}">
				<include name="gpfusion*.jar"/>
				<include name="protobuf-appendix.jar"/>
			</fileset>
		</copy>
	</target>

	<target name="tar" depends="package" description="create a tarball">
	    <tar destfile="${build.dir}/${final.name}.tar.gz"
		compression="gzip" 
		longfile="gnu">
		<tarfileset dir="${dist.dir}" prefix="${final.name}"/>
	    </tar>
	</target>

	<target name="rpm" depends="tar" description="create an RPM package">
		<mkdir dir="${package.buildroot}/BUILD" />
		<mkdir dir="${package.buildroot}/RPMS" />
		<mkdir dir="${package.buildroot}/SRPMS" />
		<mkdir dir="${package.buildroot}/SOURCES" />
		<mkdir dir="${package.buildroot}/SPECS" />
		<copy todir="${package.buildroot}/SOURCES">
			<fileset dir="${build.dir}">
				<include name="${final.name}.tar.gz" />
			</fileset>
		</copy>
		<copy file="${src.dir}/packages/gpfusion.spec" todir="${package.buildroot}/SPECS">
			<filterchain>
				<replacetokens>
					<token key="final.name" value="${final.name}" />
					<token key="version" value="${gpfusion.version}" />
					<token key="package.release" value="${package.release}" />
					<token key="package.prefix" value="${package.prefix}" />
				</replacetokens>
			</filterchain>
		</copy>
		<rpm specFile="gpfusion.spec" command="-bb" topDir="${package.buildroot}" cleanBuildDir="true" failOnError="true"/>
		<copy todir="${build.dir}/" flatten="true">
			<fileset dir="${package.buildroot}/RPMS">
				<include name="**/${name}*.rpm" />
			</fileset>
		</copy>
		<delete dir="${package.buildroot}" quiet="true" verbose="false"/>
	</target>

</project>
