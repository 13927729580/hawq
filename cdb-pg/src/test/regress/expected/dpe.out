drop schema if exists dpe_single cascade;
NOTICE:  schema "dpe_single" does not exist, skipping
create schema dpe_single;
set search_path='dpe_single';
set gp_segments_for_planner=2;
drop table if exists pt;
NOTICE:  table "pt" does not exist, skipping
drop table if exists pt1;
NOTICE:  table "pt1" does not exist, skipping
drop table if exists t;
NOTICE:  table "t" does not exist, skipping
drop table if exists t1;
NOTICE:  table "t1" does not exist, skipping
create table pt(dist int, pt1 text, pt2 text, pt3 text, ptid int) 
DISTRIBUTED BY (dist)
PARTITION BY RANGE(ptid) 
          (
          START (0) END (5) EVERY (1),
          DEFAULT PARTITION junk_data
          )
;
NOTICE:  CREATE TABLE will create partition "pt_1_prt_junk_data" for table "pt"
NOTICE:  CREATE TABLE will create partition "pt_1_prt_2" for table "pt"
NOTICE:  CREATE TABLE will create partition "pt_1_prt_3" for table "pt"
NOTICE:  CREATE TABLE will create partition "pt_1_prt_4" for table "pt"
NOTICE:  CREATE TABLE will create partition "pt_1_prt_5" for table "pt"
NOTICE:  CREATE TABLE will create partition "pt_1_prt_6" for table "pt"
create table pt1(dist int, pt1 text, pt2 text, pt3 text, ptid int) 
DISTRIBUTED RANDOMLY
PARTITION BY RANGE(ptid) 
          (
          START (0) END (5) EVERY (1),
          DEFAULT PARTITION junk_data
          )
;
NOTICE:  CREATE TABLE will create partition "pt1_1_prt_junk_data" for table "pt1"
NOTICE:  CREATE TABLE will create partition "pt1_1_prt_2" for table "pt1"
NOTICE:  CREATE TABLE will create partition "pt1_1_prt_3" for table "pt1"
NOTICE:  CREATE TABLE will create partition "pt1_1_prt_4" for table "pt1"
NOTICE:  CREATE TABLE will create partition "pt1_1_prt_5" for table "pt1"
NOTICE:  CREATE TABLE will create partition "pt1_1_prt_6" for table "pt1"
create table t(dist int, tid int, t1 text, t2 text);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'dist' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create index pt1_idx on pt using btree (pt1);
NOTICE:  building index for child partition "pt_1_prt_junk_data"
NOTICE:  building index for child partition "pt_1_prt_2"
NOTICE:  building index for child partition "pt_1_prt_3"
NOTICE:  building index for child partition "pt_1_prt_4"
NOTICE:  building index for child partition "pt_1_prt_5"
NOTICE:  building index for child partition "pt_1_prt_6"
create index ptid_idx on pt using btree (ptid);
NOTICE:  building index for child partition "pt_1_prt_junk_data"
NOTICE:  building index for child partition "pt_1_prt_2"
NOTICE:  building index for child partition "pt_1_prt_3"
NOTICE:  building index for child partition "pt_1_prt_4"
NOTICE:  building index for child partition "pt_1_prt_5"
NOTICE:  building index for child partition "pt_1_prt_6"
insert into pt select i, 'hello' || i, 'world', 'drop this', i % 6 from generate_series(0,53) i;
insert into t select i, i % 6, 'hello' || i, 'bar' from generate_series(0,1) i;
create table t1 as select * from t;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'dist' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into pt1 select * from pt;
analyze pt;
analyze pt1;
analyze t;
analyze t1;
--
-- Simple positive cases
--
explain select * from t, pt where tid = ptid;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=4.17..25.62 rows=19 width=50)
   ->  Hash Join  (cost=4.17..25.62 rows=19 width=50)
         Hash Cond: dpe_single.pt.ptid = dpe_single.t.tid
         InitPlan  (slice4)
           ->  Aggregate  (cost=2.03..2.04 rows=1 width=32)
                 ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..2.02 rows=1 width=19)
                       ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
         ->  Append  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603061::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603086::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603112::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603138::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603164::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603190::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..3.44 rows=11 width=31)
         ->  Hash  (cost=2.08..2.08 rows=2 width=19)
               ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.08 rows=2 width=19)
                     ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
 Settings:  gp_segments_for_planner=2
(30 rows)

select * from t, pt where tid = ptid;
 dist | tid |   t1   | t2  | dist |   pt1   |  pt2  |    pt3    | ptid 
------+-----+--------+-----+------+---------+-------+-----------+------
    1 |   1 | hello1 | bar |    1 | hello1  | world | drop this |    1
    1 |   1 | hello1 | bar |    7 | hello7  | world | drop this |    1
    1 |   1 | hello1 | bar |   13 | hello13 | world | drop this |    1
    1 |   1 | hello1 | bar |   19 | hello19 | world | drop this |    1
    1 |   1 | hello1 | bar |   25 | hello25 | world | drop this |    1
    1 |   1 | hello1 | bar |   31 | hello31 | world | drop this |    1
    1 |   1 | hello1 | bar |   37 | hello37 | world | drop this |    1
    1 |   1 | hello1 | bar |   43 | hello43 | world | drop this |    1
    1 |   1 | hello1 | bar |   49 | hello49 | world | drop this |    1
    0 |   0 | hello0 | bar |    0 | hello0  | world | drop this |    0
    0 |   0 | hello0 | bar |    6 | hello6  | world | drop this |    0
    0 |   0 | hello0 | bar |   12 | hello12 | world | drop this |    0
    0 |   0 | hello0 | bar |   18 | hello18 | world | drop this |    0
    0 |   0 | hello0 | bar |   24 | hello24 | world | drop this |    0
    0 |   0 | hello0 | bar |   30 | hello30 | world | drop this |    0
    0 |   0 | hello0 | bar |   36 | hello36 | world | drop this |    0
    0 |   0 | hello0 | bar |   42 | hello42 | world | drop this |    0
    0 |   0 | hello0 | bar |   48 | hello48 | world | drop this |    0
(18 rows)

explain select * from t, pt where tid + 1 = ptid;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=4.17..25.44 rows=9 width=50)
   ->  Hash Join  (cost=4.17..25.44 rows=9 width=50)
         Hash Cond: dpe_single.pt.ptid = (dpe_single.t.tid + 1)
         InitPlan  (slice4)
           ->  Aggregate  (cost=2.03..2.04 rows=1 width=32)
                 ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..2.02 rows=1 width=19)
                       ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
         ->  Append  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603061::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603086::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603112::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603138::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603164::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603190::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..3.44 rows=11 width=31)
         ->  Hash  (cost=2.08..2.08 rows=2 width=19)
               ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.08 rows=2 width=19)
                     ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
 Settings:  gp_segments_for_planner=2
(30 rows)

select * from t, pt where tid + 1 = ptid;
 dist | tid |   t1   | t2  | dist |   pt1   |  pt2  |    pt3    | ptid 
------+-----+--------+-----+------+---------+-------+-----------+------
    1 |   1 | hello1 | bar |    2 | hello2  | world | drop this |    2
    1 |   1 | hello1 | bar |    8 | hello8  | world | drop this |    2
    1 |   1 | hello1 | bar |   14 | hello14 | world | drop this |    2
    1 |   1 | hello1 | bar |   20 | hello20 | world | drop this |    2
    1 |   1 | hello1 | bar |   26 | hello26 | world | drop this |    2
    1 |   1 | hello1 | bar |   32 | hello32 | world | drop this |    2
    1 |   1 | hello1 | bar |   38 | hello38 | world | drop this |    2
    1 |   1 | hello1 | bar |   44 | hello44 | world | drop this |    2
    1 |   1 | hello1 | bar |   50 | hello50 | world | drop this |    2
    0 |   0 | hello0 | bar |    1 | hello1  | world | drop this |    1
    0 |   0 | hello0 | bar |    7 | hello7  | world | drop this |    1
    0 |   0 | hello0 | bar |   13 | hello13 | world | drop this |    1
    0 |   0 | hello0 | bar |   19 | hello19 | world | drop this |    1
    0 |   0 | hello0 | bar |   25 | hello25 | world | drop this |    1
    0 |   0 | hello0 | bar |   31 | hello31 | world | drop this |    1
    0 |   0 | hello0 | bar |   37 | hello37 | world | drop this |    1
    0 |   0 | hello0 | bar |   43 | hello43 | world | drop this |    1
    0 |   0 | hello0 | bar |   49 | hello49 | world | drop this |    1
(18 rows)

explain select * from t, pt where tid = ptid and t1 = 'hello' || tid;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=4.14..25.40 rows=4 width=50)
   ->  Hash Join  (cost=4.14..25.40 rows=4 width=50)
         Hash Cond: dpe_single.pt.ptid = dpe_single.t.tid AND ('hello'::text || dpe_single.pt.ptid::text) = dpe_single.t.t1
         InitPlan  (slice4)
           ->  Aggregate  (cost=2.04..2.05 rows=1 width=32)
                 ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..2.04 rows=1 width=19)
                       ->  Seq Scan on t  (cost=0.00..2.04 rows=1 width=19)
                             Filter: t1 = ('hello'::text || tid::text)
         ->  Append  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603061::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603086::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603112::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603138::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603164::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603190::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..3.44 rows=11 width=31)
         ->  Hash  (cost=2.06..2.06 rows=1 width=19)
               ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.06 rows=1 width=19)
                     ->  Seq Scan on t  (cost=0.00..2.04 rows=1 width=19)
                           Filter: t1 = ('hello'::text || tid::text)
 Settings:  gp_segments_for_planner=2
(32 rows)

select * from t, pt where tid = ptid and t1 = 'hello' || tid;
 dist | tid |   t1   | t2  | dist |   pt1   |  pt2  |    pt3    | ptid 
------+-----+--------+-----+------+---------+-------+-----------+------
    1 |   1 | hello1 | bar |    1 | hello1  | world | drop this |    1
    1 |   1 | hello1 | bar |    7 | hello7  | world | drop this |    1
    1 |   1 | hello1 | bar |   13 | hello13 | world | drop this |    1
    1 |   1 | hello1 | bar |   19 | hello19 | world | drop this |    1
    1 |   1 | hello1 | bar |   25 | hello25 | world | drop this |    1
    1 |   1 | hello1 | bar |   31 | hello31 | world | drop this |    1
    1 |   1 | hello1 | bar |   37 | hello37 | world | drop this |    1
    1 |   1 | hello1 | bar |   43 | hello43 | world | drop this |    1
    1 |   1 | hello1 | bar |   49 | hello49 | world | drop this |    1
    0 |   0 | hello0 | bar |    0 | hello0  | world | drop this |    0
    0 |   0 | hello0 | bar |    6 | hello6  | world | drop this |    0
    0 |   0 | hello0 | bar |   12 | hello12 | world | drop this |    0
    0 |   0 | hello0 | bar |   18 | hello18 | world | drop this |    0
    0 |   0 | hello0 | bar |   24 | hello24 | world | drop this |    0
    0 |   0 | hello0 | bar |   30 | hello30 | world | drop this |    0
    0 |   0 | hello0 | bar |   36 | hello36 | world | drop this |    0
    0 |   0 | hello0 | bar |   42 | hello42 | world | drop this |    0
    0 |   0 | hello0 | bar |   48 | hello48 | world | drop this |    0
(18 rows)

explain select * from t, pt where t1 = pt1 and ptid = tid;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=4.18..25.43 rows=4 width=50)
   ->  Hash Join  (cost=4.18..25.43 rows=4 width=50)
         Hash Cond: dpe_single.pt.pt1 = dpe_single.t.t1 AND dpe_single.pt.ptid = dpe_single.t.tid
         InitPlan  (slice4)
           ->  Aggregate  (cost=2.03..2.04 rows=1 width=32)
                 ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..2.02 rows=1 width=19)
                       ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
         ->  Append  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603061::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603086::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603112::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603138::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603164::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603190::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..3.44 rows=11 width=31)
         ->  Hash  (cost=2.08..2.08 rows=2 width=19)
               ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.08 rows=2 width=19)
                     ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
 Settings:  gp_segments_for_planner=2
(30 rows)

select * from t, pt where t1 = pt1 and ptid = tid;
 dist | tid |   t1   | t2  | dist |  pt1   |  pt2  |    pt3    | ptid 
------+-----+--------+-----+------+--------+-------+-----------+------
    0 |   0 | hello0 | bar |    0 | hello0 | world | drop this |    0
    1 |   1 | hello1 | bar |    1 | hello1 | world | drop this |    1
(2 rows)

--
-- in and exists clauses
--
explain select * from pt where ptid in (select tid from t where t1 = 'hello' || tid);
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=4.14..25.40 rows=4 width=42)
   ->  Hash EXISTS Join  (cost=4.14..25.40 rows=4 width=42)
         Hash Cond: dpe_single.pt.ptid = dpe_single.t.tid AND ('hello'::text || dpe_single.pt.ptid::text) = dpe_single.t.t1
         InitPlan  (slice4)
           ->  Aggregate  (cost=2.04..2.05 rows=1 width=32)
                 ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..2.04 rows=1 width=11)
                       ->  Seq Scan on t  (cost=0.00..2.04 rows=1 width=11)
                             Filter: t1 = ('hello'::text || tid::text)
         ->  Append  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603061::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603086::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603112::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603138::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603164::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603190::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..3.44 rows=11 width=31)
         ->  Hash  (cost=2.06..2.06 rows=1 width=11)
               ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.06 rows=1 width=11)
                     ->  Seq Scan on t  (cost=0.00..2.04 rows=1 width=11)
                           Filter: t1 = ('hello'::text || tid::text)
 Settings:  gp_segments_for_planner=2
(32 rows)

select * from pt where ptid in (select tid from t where t1 = 'hello' || tid);
 dist |   pt1   |  pt2  |    pt3    | ptid 
------+---------+-------+-----------+------
    1 | hello1  | world | drop this |    1
    7 | hello7  | world | drop this |    1
   13 | hello13 | world | drop this |    1
   19 | hello19 | world | drop this |    1
   25 | hello25 | world | drop this |    1
   31 | hello31 | world | drop this |    1
   37 | hello37 | world | drop this |    1
   43 | hello43 | world | drop this |    1
   49 | hello49 | world | drop this |    1
    0 | hello0  | world | drop this |    0
    6 | hello6  | world | drop this |    0
   12 | hello12 | world | drop this |    0
   18 | hello18 | world | drop this |    0
   24 | hello24 | world | drop this |    0
   30 | hello30 | world | drop this |    0
   36 | hello36 | world | drop this |    0
   42 | hello42 | world | drop this |    0
   48 | hello48 | world | drop this |    0
(18 rows)

explain select * from pt where exists (select 1 from t where tid = ptid and t1 = 'hello' || tid);
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=4.14..25.40 rows=4 width=42)
   ->  Hash EXISTS Join  (cost=4.14..25.40 rows=4 width=42)
         Hash Cond: dpe_single.pt.ptid = dpe_single.t.tid AND ('hello'::text || dpe_single.pt.ptid::text) = dpe_single.t.t1
         InitPlan  (slice4)
           ->  Aggregate  (cost=2.04..2.05 rows=1 width=32)
                 ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..2.04 rows=1 width=11)
                       ->  Seq Scan on t  (cost=0.00..2.04 rows=1 width=11)
                             Filter: t1 = ('hello'::text || tid::text)
         ->  Append  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603061::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603086::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603112::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603138::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603164::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603190::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..3.44 rows=11 width=31)
         ->  Hash  (cost=2.06..2.06 rows=1 width=11)
               ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.06 rows=1 width=11)
                     ->  Seq Scan on t  (cost=0.00..2.04 rows=1 width=11)
                           Filter: t1 = ('hello'::text || tid::text)
 Settings:  gp_segments_for_planner=2
(32 rows)

select * from pt where exists (select 1 from t where tid = ptid and t1 = 'hello' || tid);
 dist |   pt1   |  pt2  |    pt3    | ptid 
------+---------+-------+-----------+------
    1 | hello1  | world | drop this |    1
    7 | hello7  | world | drop this |    1
   13 | hello13 | world | drop this |    1
   19 | hello19 | world | drop this |    1
   25 | hello25 | world | drop this |    1
   31 | hello31 | world | drop this |    1
   37 | hello37 | world | drop this |    1
   43 | hello43 | world | drop this |    1
   49 | hello49 | world | drop this |    1
    0 | hello0  | world | drop this |    0
    6 | hello6  | world | drop this |    0
   12 | hello12 | world | drop this |    0
   18 | hello18 | world | drop this |    0
   24 | hello24 | world | drop this |    0
   30 | hello30 | world | drop this |    0
   36 | hello36 | world | drop this |    0
   42 | hello42 | world | drop this |    0
   48 | hello48 | world | drop this |    0
(18 rows)

--
-- group-by on top
--
explain select count(*) from t, pt where tid = ptid;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=25.77..25.78 rows=1 width=8)
   InitPlan  (slice4)
     ->  Aggregate  (cost=2.03..2.04 rows=1 width=32)
           ->  Gather Motion 2:1  (slice3; segments: 2)  (cost=0.00..2.02 rows=1 width=4)
                 ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=4)
   ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=23.67..23.71 rows=1 width=8)
         ->  Aggregate  (cost=23.67..23.68 rows=1 width=8)
               ->  Hash Join  (cost=2.13..23.58 rows=19 width=0)
                     Hash Cond: dpe_single.pt.ptid = dpe_single.t.tid
                     ->  Append  (cost=0.00..3.44 rows=11 width=4)
                           ->  Result  (cost=0.00..3.44 rows=11 width=4)
                                 One-Time Filter: 603061::oid = ANY ($0)
                                 ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..3.44 rows=11 width=4)
                           ->  Result  (cost=0.00..3.44 rows=11 width=4)
                                 One-Time Filter: 603086::oid = ANY ($0)
                                 ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..3.44 rows=11 width=4)
                           ->  Result  (cost=0.00..3.44 rows=11 width=4)
                                 One-Time Filter: 603112::oid = ANY ($0)
                                 ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..3.44 rows=11 width=4)
                           ->  Result  (cost=0.00..3.44 rows=11 width=4)
                                 One-Time Filter: 603138::oid = ANY ($0)
                                 ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..3.44 rows=11 width=4)
                           ->  Result  (cost=0.00..3.44 rows=11 width=4)
                                 One-Time Filter: 603164::oid = ANY ($0)
                                 ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..3.44 rows=11 width=4)
                           ->  Result  (cost=0.00..3.44 rows=11 width=4)
                                 One-Time Filter: 603190::oid = ANY ($0)
                                 ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..3.44 rows=11 width=4)
                     ->  Hash  (cost=2.08..2.08 rows=2 width=4)
                           ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.08 rows=2 width=4)
                                 ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=4)
 Settings:  gp_segments_for_planner=2
(32 rows)

select count(*) from t, pt where tid = ptid;
 count 
-------
    18
(1 row)

--
-- window function on top
--
explain select *, rank() over (order by ptid,pt1) from t, pt where tid = ptid;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Window  (cost=26.55..27.54 rows=37 width=50)
   Order By: dpe_single.pt.ptid, dpe_single.pt.pt1
   InitPlan  (slice4)
     ->  Aggregate  (cost=2.03..2.04 rows=1 width=32)
           ->  Gather Motion 2:1  (slice3; segments: 2)  (cost=0.00..2.02 rows=1 width=19)
                 ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
   ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=24.51..25.32 rows=19 width=50)
         Merge Key: dpe_single.pt.ptid, dpe_single.pt.pt1
         ->  Sort  (cost=24.51..24.60 rows=19 width=50)
               Sort Key: dpe_single.pt.ptid, dpe_single.pt.pt1
               ->  Hash Join  (cost=2.13..23.58 rows=19 width=50)
                     Hash Cond: dpe_single.pt.ptid = dpe_single.t.tid
                     ->  Append  (cost=0.00..3.44 rows=11 width=31)
                           ->  Result  (cost=0.00..3.44 rows=11 width=31)
                                 One-Time Filter: 603061::oid = ANY ($0)
                                 ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..3.44 rows=11 width=31)
                           ->  Result  (cost=0.00..3.44 rows=11 width=31)
                                 One-Time Filter: 603086::oid = ANY ($0)
                                 ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..3.44 rows=11 width=31)
                           ->  Result  (cost=0.00..3.44 rows=11 width=31)
                                 One-Time Filter: 603112::oid = ANY ($0)
                                 ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..3.44 rows=11 width=31)
                           ->  Result  (cost=0.00..3.44 rows=11 width=31)
                                 One-Time Filter: 603138::oid = ANY ($0)
                                 ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..3.44 rows=11 width=31)
                           ->  Result  (cost=0.00..3.44 rows=11 width=31)
                                 One-Time Filter: 603164::oid = ANY ($0)
                                 ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..3.44 rows=11 width=31)
                           ->  Result  (cost=0.00..3.44 rows=11 width=31)
                                 One-Time Filter: 603190::oid = ANY ($0)
                                 ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..3.44 rows=11 width=31)
                     ->  Hash  (cost=2.08..2.08 rows=2 width=19)
                           ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.08 rows=2 width=19)
                                 ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
 Settings:  gp_segments_for_planner=2
(35 rows)

select *, rank() over (order by ptid,pt1) from t, pt where tid = ptid;
 dist | tid |   t1   | t2  | dist |   pt1   |  pt2  |    pt3    | ptid | rank 
------+-----+--------+-----+------+---------+-------+-----------+------+------
    0 |   0 | hello0 | bar |    0 | hello0  | world | drop this |    0 |    1
    0 |   0 | hello0 | bar |   12 | hello12 | world | drop this |    0 |    2
    0 |   0 | hello0 | bar |   18 | hello18 | world | drop this |    0 |    3
    0 |   0 | hello0 | bar |   24 | hello24 | world | drop this |    0 |    4
    0 |   0 | hello0 | bar |   30 | hello30 | world | drop this |    0 |    5
    0 |   0 | hello0 | bar |   36 | hello36 | world | drop this |    0 |    6
    0 |   0 | hello0 | bar |   42 | hello42 | world | drop this |    0 |    7
    0 |   0 | hello0 | bar |   48 | hello48 | world | drop this |    0 |    8
    0 |   0 | hello0 | bar |    6 | hello6  | world | drop this |    0 |    9
    1 |   1 | hello1 | bar |    1 | hello1  | world | drop this |    1 |   10
    1 |   1 | hello1 | bar |   13 | hello13 | world | drop this |    1 |   11
    1 |   1 | hello1 | bar |   19 | hello19 | world | drop this |    1 |   12
    1 |   1 | hello1 | bar |   25 | hello25 | world | drop this |    1 |   13
    1 |   1 | hello1 | bar |   31 | hello31 | world | drop this |    1 |   14
    1 |   1 | hello1 | bar |   37 | hello37 | world | drop this |    1 |   15
    1 |   1 | hello1 | bar |   43 | hello43 | world | drop this |    1 |   16
    1 |   1 | hello1 | bar |   49 | hello49 | world | drop this |    1 |   17
    1 |   1 | hello1 | bar |    7 | hello7  | world | drop this |    1 |   18
(18 rows)

--
-- set ops
--
explain select * from t, pt where tid = ptid
	  union all
	  select * from t, pt where tid + 2 = ptid;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice5; segments: 2)  (cost=4.17..25.98 rows=19 width=50)
   ->  Append  (cost=4.17..25.98 rows=19 width=50)
         ->  Hash Join  (cost=4.17..25.62 rows=19 width=50)
               Hash Cond: dpe_single.pt.ptid = dpe_single.t.tid
               InitPlan  (slice6)
                 ->  Aggregate  (cost=2.03..2.04 rows=1 width=32)
                       ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..2.02 rows=1 width=19)
                             ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
               ->  Append  (cost=0.00..3.44 rows=11 width=31)
                     ->  Result  (cost=0.00..3.44 rows=11 width=31)
                           One-Time Filter: 603061::oid = ANY ($1)
                           ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..3.44 rows=11 width=31)
                     ->  Result  (cost=0.00..3.44 rows=11 width=31)
                           One-Time Filter: 603086::oid = ANY ($1)
                           ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..3.44 rows=11 width=31)
                     ->  Result  (cost=0.00..3.44 rows=11 width=31)
                           One-Time Filter: 603112::oid = ANY ($1)
                           ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..3.44 rows=11 width=31)
                     ->  Result  (cost=0.00..3.44 rows=11 width=31)
                           One-Time Filter: 603138::oid = ANY ($1)
                           ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..3.44 rows=11 width=31)
                     ->  Result  (cost=0.00..3.44 rows=11 width=31)
                           One-Time Filter: 603164::oid = ANY ($1)
                           ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..3.44 rows=11 width=31)
                     ->  Result  (cost=0.00..3.44 rows=11 width=31)
                           One-Time Filter: 603190::oid = ANY ($1)
                           ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Hash  (cost=2.08..2.08 rows=2 width=19)
                     ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.08 rows=2 width=19)
                           ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
         ->  Hash Join  (cost=4.17..25.44 rows=9 width=50)
               Hash Cond: dpe_single.pt.ptid = (dpe_single.t.tid + 2)
               InitPlan  (slice7)
                 ->  Aggregate  (cost=2.03..2.04 rows=1 width=32)
                       ->  Gather Motion 2:1  (slice4; segments: 2)  (cost=0.00..2.02 rows=1 width=19)
                             ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
               ->  Append  (cost=0.00..3.44 rows=11 width=31)
                     ->  Result  (cost=0.00..3.44 rows=11 width=31)
                           One-Time Filter: 603061::oid = ANY ($0)
                           ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..3.44 rows=11 width=31)
                     ->  Result  (cost=0.00..3.44 rows=11 width=31)
                           One-Time Filter: 603086::oid = ANY ($0)
                           ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..3.44 rows=11 width=31)
                     ->  Result  (cost=0.00..3.44 rows=11 width=31)
                           One-Time Filter: 603112::oid = ANY ($0)
                           ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..3.44 rows=11 width=31)
                     ->  Result  (cost=0.00..3.44 rows=11 width=31)
                           One-Time Filter: 603138::oid = ANY ($0)
                           ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..3.44 rows=11 width=31)
                     ->  Result  (cost=0.00..3.44 rows=11 width=31)
                           One-Time Filter: 603164::oid = ANY ($0)
                           ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..3.44 rows=11 width=31)
                     ->  Result  (cost=0.00..3.44 rows=11 width=31)
                           One-Time Filter: 603190::oid = ANY ($0)
                           ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Hash  (cost=2.08..2.08 rows=2 width=19)
                     ->  Broadcast Motion 2:2  (slice3; segments: 2)  (cost=0.00..2.08 rows=2 width=19)
                           ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
 Settings:  gp_segments_for_planner=2
(59 rows)

select * from t, pt where tid = ptid
	  union all
	  select * from t, pt where tid + 2 = ptid;
 dist | tid |   t1   | t2  | dist |   pt1   |  pt2  |    pt3    | ptid 
------+-----+--------+-----+------+---------+-------+-----------+------
    1 |   1 | hello1 | bar |    1 | hello1  | world | drop this |    1
    1 |   1 | hello1 | bar |    7 | hello7  | world | drop this |    1
    1 |   1 | hello1 | bar |   13 | hello13 | world | drop this |    1
    1 |   1 | hello1 | bar |   19 | hello19 | world | drop this |    1
    1 |   1 | hello1 | bar |   25 | hello25 | world | drop this |    1
    1 |   1 | hello1 | bar |   31 | hello31 | world | drop this |    1
    1 |   1 | hello1 | bar |   37 | hello37 | world | drop this |    1
    1 |   1 | hello1 | bar |   43 | hello43 | world | drop this |    1
    1 |   1 | hello1 | bar |   49 | hello49 | world | drop this |    1
    1 |   1 | hello1 | bar |    3 | hello3  | world | drop this |    3
    1 |   1 | hello1 | bar |    9 | hello9  | world | drop this |    3
    1 |   1 | hello1 | bar |   15 | hello15 | world | drop this |    3
    1 |   1 | hello1 | bar |   21 | hello21 | world | drop this |    3
    1 |   1 | hello1 | bar |   27 | hello27 | world | drop this |    3
    1 |   1 | hello1 | bar |   33 | hello33 | world | drop this |    3
    1 |   1 | hello1 | bar |   39 | hello39 | world | drop this |    3
    1 |   1 | hello1 | bar |   45 | hello45 | world | drop this |    3
    1 |   1 | hello1 | bar |   51 | hello51 | world | drop this |    3
    0 |   0 | hello0 | bar |    0 | hello0  | world | drop this |    0
    0 |   0 | hello0 | bar |    6 | hello6  | world | drop this |    0
    0 |   0 | hello0 | bar |   12 | hello12 | world | drop this |    0
    0 |   0 | hello0 | bar |   18 | hello18 | world | drop this |    0
    0 |   0 | hello0 | bar |   24 | hello24 | world | drop this |    0
    0 |   0 | hello0 | bar |   30 | hello30 | world | drop this |    0
    0 |   0 | hello0 | bar |   36 | hello36 | world | drop this |    0
    0 |   0 | hello0 | bar |   42 | hello42 | world | drop this |    0
    0 |   0 | hello0 | bar |   48 | hello48 | world | drop this |    0
    0 |   0 | hello0 | bar |    2 | hello2  | world | drop this |    2
    0 |   0 | hello0 | bar |    8 | hello8  | world | drop this |    2
    0 |   0 | hello0 | bar |   14 | hello14 | world | drop this |    2
    0 |   0 | hello0 | bar |   20 | hello20 | world | drop this |    2
    0 |   0 | hello0 | bar |   26 | hello26 | world | drop this |    2
    0 |   0 | hello0 | bar |   32 | hello32 | world | drop this |    2
    0 |   0 | hello0 | bar |   38 | hello38 | world | drop this |    2
    0 |   0 | hello0 | bar |   44 | hello44 | world | drop this |    2
    0 |   0 | hello0 | bar |   50 | hello50 | world | drop this |    2
(36 rows)

--
-- set-ops
--
explain select count(*) from
	( select * from t, pt where tid = ptid
	  union all
	  select * from t, pt where tid + 2 = ptid
	  ) foo;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=26.49..26.50 rows=1 width=8)
   ->  Gather Motion 2:1  (slice5; segments: 2)  (cost=26.43..26.47 rows=1 width=8)
         ->  Aggregate  (cost=26.43..26.44 rows=1 width=8)
               ->  Subquery Scan foo  (cost=4.17..26.34 rows=19 width=0)
                     ->  Append  (cost=4.17..25.98 rows=19 width=50)
                           ->  Hash Join  (cost=4.17..25.62 rows=19 width=50)
                                 Hash Cond: dpe_single.pt.ptid = dpe_single.t.tid
                                 InitPlan  (slice6)
                                   ->  Aggregate  (cost=2.03..2.04 rows=1 width=32)
                                         ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..2.02 rows=1 width=19)
                                               ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
                                 ->  Append  (cost=0.00..3.44 rows=11 width=31)
                                       ->  Result  (cost=0.00..3.44 rows=11 width=31)
                                             One-Time Filter: 603061::oid = ANY ($1)
                                             ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..3.44 rows=11 width=31)
                                       ->  Result  (cost=0.00..3.44 rows=11 width=31)
                                             One-Time Filter: 603086::oid = ANY ($1)
                                             ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..3.44 rows=11 width=31)
                                       ->  Result  (cost=0.00..3.44 rows=11 width=31)
                                             One-Time Filter: 603112::oid = ANY ($1)
                                             ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..3.44 rows=11 width=31)
                                       ->  Result  (cost=0.00..3.44 rows=11 width=31)
                                             One-Time Filter: 603138::oid = ANY ($1)
                                             ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..3.44 rows=11 width=31)
                                       ->  Result  (cost=0.00..3.44 rows=11 width=31)
                                             One-Time Filter: 603164::oid = ANY ($1)
                                             ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..3.44 rows=11 width=31)
                                       ->  Result  (cost=0.00..3.44 rows=11 width=31)
                                             One-Time Filter: 603190::oid = ANY ($1)
                                             ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..3.44 rows=11 width=31)
                                 ->  Hash  (cost=2.08..2.08 rows=2 width=19)
                                       ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.08 rows=2 width=19)
                                             ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
                           ->  Hash Join  (cost=4.17..25.44 rows=9 width=50)
                                 Hash Cond: dpe_single.pt.ptid = (dpe_single.t.tid + 2)
                                 InitPlan  (slice7)
                                   ->  Aggregate  (cost=2.03..2.04 rows=1 width=32)
                                         ->  Gather Motion 2:1  (slice4; segments: 2)  (cost=0.00..2.02 rows=1 width=19)
                                               ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
                                 ->  Append  (cost=0.00..3.44 rows=11 width=31)
                                       ->  Result  (cost=0.00..3.44 rows=11 width=31)
                                             One-Time Filter: 603061::oid = ANY ($0)
                                             ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..3.44 rows=11 width=31)
                                       ->  Result  (cost=0.00..3.44 rows=11 width=31)
                                             One-Time Filter: 603086::oid = ANY ($0)
                                             ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..3.44 rows=11 width=31)
                                       ->  Result  (cost=0.00..3.44 rows=11 width=31)
                                             One-Time Filter: 603112::oid = ANY ($0)
                                             ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..3.44 rows=11 width=31)
                                       ->  Result  (cost=0.00..3.44 rows=11 width=31)
                                             One-Time Filter: 603138::oid = ANY ($0)
                                             ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..3.44 rows=11 width=31)
                                       ->  Result  (cost=0.00..3.44 rows=11 width=31)
                                             One-Time Filter: 603164::oid = ANY ($0)
                                             ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..3.44 rows=11 width=31)
                                       ->  Result  (cost=0.00..3.44 rows=11 width=31)
                                             One-Time Filter: 603190::oid = ANY ($0)
                                             ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..3.44 rows=11 width=31)
                                 ->  Hash  (cost=2.08..2.08 rows=2 width=19)
                                       ->  Broadcast Motion 2:2  (slice3; segments: 2)  (cost=0.00..2.08 rows=2 width=19)
                                             ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
 Settings:  gp_segments_for_planner=2
(62 rows)

select count(*) from
	( select * from t, pt where tid = ptid
	  union all
	  select * from t, pt where tid + 2 = ptid
	  ) foo;
 count 
-------
    36
(1 row)

--
-- other join types (NL)
--
set enable_hashjoin=off;
set enable_nestloop=on;
set enable_mergejoin=off;
explain select * from t, pt where tid = ptid;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=4.12..34.48 rows=19 width=50)
   ->  Nested Loop  (cost=4.12..34.48 rows=19 width=50)
         Join Filter: dpe_single.t.tid = dpe_single.pt.ptid
         InitPlan  (slice4)
           ->  Aggregate  (cost=2.03..2.04 rows=1 width=32)
                 ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..2.02 rows=1 width=19)
                       ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
         ->  Append  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603061::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603086::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603112::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603138::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603164::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603190::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..3.44 rows=11 width=31)
         ->  Materialize  (cost=2.08..2.12 rows=2 width=19)
               ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.08 rows=2 width=19)
                     ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
 Settings:  enable_hashjoin=off; enable_mergejoin=off; enable_nestloop=on; gp_segments_for_planner=2
(30 rows)

select * from t, pt where tid = ptid;
 dist | tid |   t1   | t2  | dist |   pt1   |  pt2  |    pt3    | ptid 
------+-----+--------+-----+------+---------+-------+-----------+------
    1 |   1 | hello1 | bar |    1 | hello1  | world | drop this |    1
    1 |   1 | hello1 | bar |    7 | hello7  | world | drop this |    1
    1 |   1 | hello1 | bar |   13 | hello13 | world | drop this |    1
    1 |   1 | hello1 | bar |   19 | hello19 | world | drop this |    1
    1 |   1 | hello1 | bar |   25 | hello25 | world | drop this |    1
    1 |   1 | hello1 | bar |   31 | hello31 | world | drop this |    1
    1 |   1 | hello1 | bar |   37 | hello37 | world | drop this |    1
    1 |   1 | hello1 | bar |   43 | hello43 | world | drop this |    1
    1 |   1 | hello1 | bar |   49 | hello49 | world | drop this |    1
    0 |   0 | hello0 | bar |    0 | hello0  | world | drop this |    0
    0 |   0 | hello0 | bar |    6 | hello6  | world | drop this |    0
    0 |   0 | hello0 | bar |   12 | hello12 | world | drop this |    0
    0 |   0 | hello0 | bar |   18 | hello18 | world | drop this |    0
    0 |   0 | hello0 | bar |   24 | hello24 | world | drop this |    0
    0 |   0 | hello0 | bar |   30 | hello30 | world | drop this |    0
    0 |   0 | hello0 | bar |   36 | hello36 | world | drop this |    0
    0 |   0 | hello0 | bar |   42 | hello42 | world | drop this |    0
    0 |   0 | hello0 | bar |   48 | hello48 | world | drop this |    0
(18 rows)

set enable_hashjoin=on;
set enable_nestloop=off;
set enable_mergejoin=off;
--
-- index scan
--
set enable_seqscan=off;
set enable_indexscan=on;
set enable_bitmapscan=off;
set enable_hashjoin=off;
explain select * from t, pt where tid = ptid and pt1 = 'hello0';
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=4.12..1205.92 rows=2 width=50)
   ->  Nested Loop  (cost=4.12..1205.92 rows=2 width=50)
         Join Filter: dpe_single.t.tid = dpe_single.pt.ptid
         InitPlan  (slice4)
           ->  Aggregate  (cost=2.03..2.04 rows=1 width=32)
                 ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..2.02 rows=1 width=19)
                       ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
         ->  Append  (cost=0.00..200.27 rows=1 width=31)
               ->  Result  (cost=0.00..200.27 rows=1 width=31)
                     One-Time Filter: 603061::oid = ANY ($0)
                     ->  Index Scan using pt1_idx_1_prt_junk_data on pt_1_prt_junk_data pt  (cost=0.00..200.27 rows=1 width=31)
                           Index Cond: pt1 = 'hello0'::text
               ->  Result  (cost=0.00..200.27 rows=1 width=31)
                     One-Time Filter: 603086::oid = ANY ($0)
                     ->  Index Scan using pt1_idx_1_prt_2 on pt_1_prt_2 pt  (cost=0.00..200.27 rows=1 width=31)
                           Index Cond: pt1 = 'hello0'::text
               ->  Result  (cost=0.00..200.27 rows=1 width=31)
                     One-Time Filter: 603112::oid = ANY ($0)
                     ->  Index Scan using pt1_idx_1_prt_3 on pt_1_prt_3 pt  (cost=0.00..200.27 rows=1 width=31)
                           Index Cond: pt1 = 'hello0'::text
               ->  Result  (cost=0.00..200.27 rows=1 width=31)
                     One-Time Filter: 603138::oid = ANY ($0)
                     ->  Index Scan using pt1_idx_1_prt_4 on pt_1_prt_4 pt  (cost=0.00..200.27 rows=1 width=31)
                           Index Cond: pt1 = 'hello0'::text
               ->  Result  (cost=0.00..200.27 rows=1 width=31)
                     One-Time Filter: 603164::oid = ANY ($0)
                     ->  Index Scan using pt1_idx_1_prt_5 on pt_1_prt_5 pt  (cost=0.00..200.27 rows=1 width=31)
                           Index Cond: pt1 = 'hello0'::text
               ->  Result  (cost=0.00..200.27 rows=1 width=31)
                     One-Time Filter: 603190::oid = ANY ($0)
                     ->  Index Scan using pt1_idx_1_prt_6 on pt_1_prt_6 pt  (cost=0.00..200.27 rows=1 width=31)
                           Index Cond: pt1 = 'hello0'::text
         ->  Materialize  (cost=2.08..2.12 rows=2 width=19)
               ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.08 rows=2 width=19)
                     ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
 Settings:  enable_bitmapscan=off; enable_hashjoin=off; enable_indexscan=on; enable_mergejoin=off; enable_nestloop=off; enable_seqscan=off; gp_segments_for_planner=2
(36 rows)

select * from t, pt where tid = ptid and pt1 = 'hello0';
 dist | tid |   t1   | t2  | dist |  pt1   |  pt2  |    pt3    | ptid 
------+-----+--------+-----+------+--------+-------+-----------+------
    0 |   0 | hello0 | bar |    0 | hello0 | world | drop this |    0
(1 row)

--
-- NL Index Scan
--
set enable_nestloop=on;
set enable_indexscan=on;
set enable_seqscan=off;
set enable_hashjoin=off;
explain select * from t, pt where tid = ptid;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=4.12..1837.31 rows=19 width=50)
   ->  Nested Loop  (cost=4.12..1837.31 rows=19 width=50)
         Join Filter: dpe_single.t.tid = dpe_single.pt.ptid
         InitPlan  (slice4)
           ->  Aggregate  (cost=2.03..2.04 rows=1 width=32)
                 ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..2.02 rows=1 width=19)
                       ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
         ->  Append  (cost=0.00..303.91 rows=122 width=31)
               ->  Result  (cost=0.00..303.91 rows=122 width=31)
                     One-Time Filter: 603061::oid = ANY ($0)
                     ->  Index Scan using ptid_idx_1_prt_junk_data on pt_1_prt_junk_data pt  (cost=0.00..303.91 rows=122 width=31)
               ->  Result  (cost=0.00..303.91 rows=122 width=31)
                     One-Time Filter: 603086::oid = ANY ($0)
                     ->  Index Scan using ptid_idx_1_prt_2 on pt_1_prt_2 pt  (cost=0.00..303.91 rows=122 width=31)
               ->  Result  (cost=0.00..303.91 rows=122 width=31)
                     One-Time Filter: 603112::oid = ANY ($0)
                     ->  Index Scan using ptid_idx_1_prt_3 on pt_1_prt_3 pt  (cost=0.00..303.91 rows=122 width=31)
               ->  Result  (cost=0.00..303.91 rows=122 width=31)
                     One-Time Filter: 603138::oid = ANY ($0)
                     ->  Index Scan using ptid_idx_1_prt_4 on pt_1_prt_4 pt  (cost=0.00..303.91 rows=122 width=31)
               ->  Result  (cost=0.00..303.91 rows=122 width=31)
                     One-Time Filter: 603164::oid = ANY ($0)
                     ->  Index Scan using ptid_idx_1_prt_5 on pt_1_prt_5 pt  (cost=0.00..303.91 rows=122 width=31)
               ->  Result  (cost=0.00..303.91 rows=122 width=31)
                     One-Time Filter: 603190::oid = ANY ($0)
                     ->  Index Scan using ptid_idx_1_prt_6 on pt_1_prt_6 pt  (cost=0.00..303.91 rows=122 width=31)
         ->  Materialize  (cost=2.08..2.12 rows=2 width=19)
               ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.08 rows=2 width=19)
                     ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
 Settings:  enable_bitmapscan=off; enable_hashjoin=off; enable_indexscan=on; enable_mergejoin=off; enable_nestloop=on; enable_seqscan=off; gp_segments_for_planner=2
(30 rows)

select * from t, pt where tid = ptid;
 dist | tid |   t1   | t2  | dist |   pt1   |  pt2  |    pt3    | ptid 
------+-----+--------+-----+------+---------+-------+-----------+------
    1 |   1 | hello1 | bar |   49 | hello49 | world | drop this |    1
    1 |   1 | hello1 | bar |   43 | hello43 | world | drop this |    1
    1 |   1 | hello1 | bar |   37 | hello37 | world | drop this |    1
    1 |   1 | hello1 | bar |   31 | hello31 | world | drop this |    1
    1 |   1 | hello1 | bar |   25 | hello25 | world | drop this |    1
    1 |   1 | hello1 | bar |   19 | hello19 | world | drop this |    1
    1 |   1 | hello1 | bar |   13 | hello13 | world | drop this |    1
    1 |   1 | hello1 | bar |    7 | hello7  | world | drop this |    1
    1 |   1 | hello1 | bar |    1 | hello1  | world | drop this |    1
    0 |   0 | hello0 | bar |   48 | hello48 | world | drop this |    0
    0 |   0 | hello0 | bar |   42 | hello42 | world | drop this |    0
    0 |   0 | hello0 | bar |   36 | hello36 | world | drop this |    0
    0 |   0 | hello0 | bar |   30 | hello30 | world | drop this |    0
    0 |   0 | hello0 | bar |   24 | hello24 | world | drop this |    0
    0 |   0 | hello0 | bar |   18 | hello18 | world | drop this |    0
    0 |   0 | hello0 | bar |   12 | hello12 | world | drop this |    0
    0 |   0 | hello0 | bar |    6 | hello6  | world | drop this |    0
    0 |   0 | hello0 | bar |    0 | hello0  | world | drop this |    0
(18 rows)

--
-- Negative test cases where transform does not apply
--
set enable_indexscan=off;
set enable_seqscan=on;
set enable_hashjoin=on;
set enable_nestloop=off;
explain select * from t, pt where t1 = pt1;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice2; segments: 2)  (cost=2.13..23.12 rows=4 width=50)
   ->  Hash Join  (cost=2.13..23.12 rows=4 width=50)
         Hash Cond: dpe_single.pt.pt1 = t.t1
         ->  Append  (cost=0.00..3.44 rows=11 width=31)
               ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..3.44 rows=11 width=31)
         ->  Hash  (cost=2.08..2.08 rows=2 width=19)
               ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.08 rows=2 width=19)
                     ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
 Settings:  enable_bitmapscan=off; enable_hashjoin=on; enable_indexscan=off; enable_mergejoin=off; enable_nestloop=off; enable_seqscan=on; gp_segments_for_planner=2
(14 rows)

select * from t, pt where t1 = pt1;
 dist | tid |   t1   | t2  | dist |  pt1   |  pt2  |    pt3    | ptid 
------+-----+--------+-----+------+--------+-------+-----------+------
    1 |   1 | hello1 | bar |    1 | hello1 | world | drop this |    1
    0 |   0 | hello0 | bar |    0 | hello0 | world | drop this |    0
(2 rows)

explain select * from t, pt where tid < ptid;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice2; segments: 2)  (cost=2.08..32.44 rows=36 width=50)
   ->  Nested Loop  (cost=2.08..32.44 rows=36 width=50)
         Join Filter: t.tid < dpe_single.pt.ptid
         ->  Append  (cost=0.00..3.44 rows=11 width=31)
               ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..3.44 rows=11 width=31)
         ->  Materialize  (cost=2.08..2.12 rows=2 width=19)
               ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.08 rows=2 width=19)
                     ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
 Settings:  enable_bitmapscan=off; enable_hashjoin=on; enable_indexscan=off; enable_mergejoin=off; enable_nestloop=off; enable_seqscan=on; gp_segments_for_planner=2
(14 rows)

select * from t, pt where tid < ptid;
 dist | tid |   t1   | t2  | dist |   pt1   |  pt2  |    pt3    | ptid 
------+-----+--------+-----+------+---------+-------+-----------+------
    1 |   1 | hello1 | bar |    2 | hello2  | world | drop this |    2
    0 |   0 | hello0 | bar |    2 | hello2  | world | drop this |    2
    1 |   1 | hello1 | bar |    8 | hello8  | world | drop this |    2
    0 |   0 | hello0 | bar |    8 | hello8  | world | drop this |    2
    1 |   1 | hello1 | bar |   14 | hello14 | world | drop this |    2
    0 |   0 | hello0 | bar |   14 | hello14 | world | drop this |    2
    1 |   1 | hello1 | bar |   20 | hello20 | world | drop this |    2
    0 |   0 | hello0 | bar |   20 | hello20 | world | drop this |    2
    1 |   1 | hello1 | bar |   26 | hello26 | world | drop this |    2
    0 |   0 | hello0 | bar |   26 | hello26 | world | drop this |    2
    1 |   1 | hello1 | bar |   32 | hello32 | world | drop this |    2
    0 |   0 | hello0 | bar |   32 | hello32 | world | drop this |    2
    1 |   1 | hello1 | bar |   38 | hello38 | world | drop this |    2
    0 |   0 | hello0 | bar |   38 | hello38 | world | drop this |    2
    1 |   1 | hello1 | bar |   44 | hello44 | world | drop this |    2
    0 |   0 | hello0 | bar |   44 | hello44 | world | drop this |    2
    1 |   1 | hello1 | bar |   50 | hello50 | world | drop this |    2
    0 |   0 | hello0 | bar |   50 | hello50 | world | drop this |    2
    1 |   1 | hello1 | bar |    4 | hello4  | world | drop this |    4
    0 |   0 | hello0 | bar |    4 | hello4  | world | drop this |    4
    1 |   1 | hello1 | bar |   10 | hello10 | world | drop this |    4
    0 |   0 | hello0 | bar |   10 | hello10 | world | drop this |    4
    1 |   1 | hello1 | bar |   16 | hello16 | world | drop this |    4
    0 |   0 | hello0 | bar |   16 | hello16 | world | drop this |    4
    1 |   1 | hello1 | bar |   22 | hello22 | world | drop this |    4
    0 |   0 | hello0 | bar |   22 | hello22 | world | drop this |    4
    1 |   1 | hello1 | bar |   28 | hello28 | world | drop this |    4
    0 |   0 | hello0 | bar |   28 | hello28 | world | drop this |    4
    1 |   1 | hello1 | bar |   34 | hello34 | world | drop this |    4
    0 |   0 | hello0 | bar |   34 | hello34 | world | drop this |    4
    1 |   1 | hello1 | bar |   40 | hello40 | world | drop this |    4
    0 |   0 | hello0 | bar |   40 | hello40 | world | drop this |    4
    1 |   1 | hello1 | bar |   46 | hello46 | world | drop this |    4
    0 |   0 | hello0 | bar |   46 | hello46 | world | drop this |    4
    1 |   1 | hello1 | bar |   52 | hello52 | world | drop this |    4
    0 |   0 | hello0 | bar |   52 | hello52 | world | drop this |    4
    1 |   1 | hello1 | bar |    5 | hello5  | world | drop this |    5
    0 |   0 | hello0 | bar |    5 | hello5  | world | drop this |    5
    1 |   1 | hello1 | bar |   11 | hello11 | world | drop this |    5
    0 |   0 | hello0 | bar |   11 | hello11 | world | drop this |    5
    1 |   1 | hello1 | bar |   17 | hello17 | world | drop this |    5
    0 |   0 | hello0 | bar |   17 | hello17 | world | drop this |    5
    1 |   1 | hello1 | bar |   23 | hello23 | world | drop this |    5
    0 |   0 | hello0 | bar |   23 | hello23 | world | drop this |    5
    1 |   1 | hello1 | bar |   29 | hello29 | world | drop this |    5
    0 |   0 | hello0 | bar |   29 | hello29 | world | drop this |    5
    1 |   1 | hello1 | bar |   35 | hello35 | world | drop this |    5
    0 |   0 | hello0 | bar |   35 | hello35 | world | drop this |    5
    1 |   1 | hello1 | bar |   41 | hello41 | world | drop this |    5
    0 |   0 | hello0 | bar |   41 | hello41 | world | drop this |    5
    1 |   1 | hello1 | bar |   47 | hello47 | world | drop this |    5
    0 |   0 | hello0 | bar |   47 | hello47 | world | drop this |    5
    1 |   1 | hello1 | bar |   53 | hello53 | world | drop this |    5
    0 |   0 | hello0 | bar |   53 | hello53 | world | drop this |    5
    0 |   0 | hello0 | bar |    1 | hello1  | world | drop this |    1
    0 |   0 | hello0 | bar |    7 | hello7  | world | drop this |    1
    0 |   0 | hello0 | bar |   13 | hello13 | world | drop this |    1
    0 |   0 | hello0 | bar |   19 | hello19 | world | drop this |    1
    0 |   0 | hello0 | bar |   25 | hello25 | world | drop this |    1
    0 |   0 | hello0 | bar |   31 | hello31 | world | drop this |    1
    0 |   0 | hello0 | bar |   37 | hello37 | world | drop this |    1
    0 |   0 | hello0 | bar |   43 | hello43 | world | drop this |    1
    0 |   0 | hello0 | bar |   49 | hello49 | world | drop this |    1
    1 |   1 | hello1 | bar |    3 | hello3  | world | drop this |    3
    0 |   0 | hello0 | bar |    3 | hello3  | world | drop this |    3
    1 |   1 | hello1 | bar |    9 | hello9  | world | drop this |    3
    0 |   0 | hello0 | bar |    9 | hello9  | world | drop this |    3
    1 |   1 | hello1 | bar |   15 | hello15 | world | drop this |    3
    0 |   0 | hello0 | bar |   15 | hello15 | world | drop this |    3
    1 |   1 | hello1 | bar |   21 | hello21 | world | drop this |    3
    0 |   0 | hello0 | bar |   21 | hello21 | world | drop this |    3
    1 |   1 | hello1 | bar |   27 | hello27 | world | drop this |    3
    0 |   0 | hello0 | bar |   27 | hello27 | world | drop this |    3
    1 |   1 | hello1 | bar |   33 | hello33 | world | drop this |    3
    0 |   0 | hello0 | bar |   33 | hello33 | world | drop this |    3
    1 |   1 | hello1 | bar |   39 | hello39 | world | drop this |    3
    0 |   0 | hello0 | bar |   39 | hello39 | world | drop this |    3
    1 |   1 | hello1 | bar |   45 | hello45 | world | drop this |    3
    0 |   0 | hello0 | bar |   45 | hello45 | world | drop this |    3
    1 |   1 | hello1 | bar |   51 | hello51 | world | drop this |    3
    0 |   0 | hello0 | bar |   51 | hello51 | world | drop this |    3
(81 rows)

--
-- cascading joins
--
explain select * from t, t1, pt where t1.t2 = t.t2 and t1.tid = ptid;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice7; segments: 2)  (cost=8.64..30.63 rows=37 width=69)
   ->  Hash Join  (cost=8.64..30.63 rows=37 width=69)
         Hash Cond: dpe_single.pt.ptid = dpe_single.t1.tid
         InitPlan  (slice8)
           ->  Aggregate  (cost=4.21..4.22 rows=1 width=32)
                 ->  Gather Motion 2:1  (slice6; segments: 2)  (cost=2.08..4.20 rows=2 width=38)
                       ->  Hash Join  (cost=2.08..4.20 rows=2 width=38)
                             Hash Cond: dpe_single.t.t2 = dpe_single.t1.t2
                             ->  Redistribute Motion 2:2  (slice4; segments: 2)  (cost=0.00..2.06 rows=1 width=19)
                                   Hash Key: dpe_single.t.t2
                                   ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
                             ->  Hash  (cost=2.06..2.06 rows=1 width=19)
                                   ->  Redistribute Motion 2:2  (slice5; segments: 2)  (cost=0.00..2.06 rows=1 width=19)
                                         Hash Key: dpe_single.t1.t2
                                         ->  Seq Scan on t1  (cost=0.00..2.02 rows=1 width=19)
         ->  Append  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603061::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603086::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603112::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603138::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603164::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..3.44 rows=11 width=31)
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603190::oid = ANY ($0)
                     ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..3.44 rows=11 width=31)
         ->  Hash  (cost=4.32..4.32 rows=4 width=38)
               ->  Broadcast Motion 2:2  (slice3; segments: 2)  (cost=2.08..4.32 rows=4 width=38)
                     ->  Hash Join  (cost=2.08..4.20 rows=2 width=38)
                           Hash Cond: dpe_single.t.t2 = dpe_single.t1.t2
                           ->  Redistribute Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.06 rows=1 width=19)
                                 Hash Key: dpe_single.t.t2
                                 ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
                           ->  Hash  (cost=2.06..2.06 rows=1 width=19)
                                 ->  Redistribute Motion 2:2  (slice2; segments: 2)  (cost=0.00..2.06 rows=1 width=19)
                                       Hash Key: dpe_single.t1.t2
                                       ->  Seq Scan on t1  (cost=0.00..2.02 rows=1 width=19)
 Settings:  enable_bitmapscan=off; enable_hashjoin=on; enable_indexscan=off; enable_mergejoin=off; enable_nestloop=off; enable_seqscan=on; gp_segments_for_planner=2
(46 rows)

select * from t, t1, pt where t1.t2 = t.t2 and t1.tid = ptid;
 dist | tid |   t1   | t2  | dist | tid |   t1   | t2  | dist |   pt1   |  pt2  |    pt3    | ptid 
------+-----+--------+-----+------+-----+--------+-----+------+---------+-------+-----------+------
    0 |   0 | hello0 | bar |    0 |   0 | hello0 | bar |    0 | hello0  | world | drop this |    0
    1 |   1 | hello1 | bar |    0 |   0 | hello0 | bar |    0 | hello0  | world | drop this |    0
    0 |   0 | hello0 | bar |    0 |   0 | hello0 | bar |    6 | hello6  | world | drop this |    0
    1 |   1 | hello1 | bar |    0 |   0 | hello0 | bar |    6 | hello6  | world | drop this |    0
    0 |   0 | hello0 | bar |    0 |   0 | hello0 | bar |   12 | hello12 | world | drop this |    0
    1 |   1 | hello1 | bar |    0 |   0 | hello0 | bar |   12 | hello12 | world | drop this |    0
    0 |   0 | hello0 | bar |    0 |   0 | hello0 | bar |   18 | hello18 | world | drop this |    0
    1 |   1 | hello1 | bar |    0 |   0 | hello0 | bar |   18 | hello18 | world | drop this |    0
    0 |   0 | hello0 | bar |    0 |   0 | hello0 | bar |   24 | hello24 | world | drop this |    0
    1 |   1 | hello1 | bar |    0 |   0 | hello0 | bar |   24 | hello24 | world | drop this |    0
    0 |   0 | hello0 | bar |    0 |   0 | hello0 | bar |   30 | hello30 | world | drop this |    0
    1 |   1 | hello1 | bar |    0 |   0 | hello0 | bar |   30 | hello30 | world | drop this |    0
    0 |   0 | hello0 | bar |    0 |   0 | hello0 | bar |   36 | hello36 | world | drop this |    0
    1 |   1 | hello1 | bar |    0 |   0 | hello0 | bar |   36 | hello36 | world | drop this |    0
    0 |   0 | hello0 | bar |    0 |   0 | hello0 | bar |   42 | hello42 | world | drop this |    0
    1 |   1 | hello1 | bar |    0 |   0 | hello0 | bar |   42 | hello42 | world | drop this |    0
    0 |   0 | hello0 | bar |    0 |   0 | hello0 | bar |   48 | hello48 | world | drop this |    0
    1 |   1 | hello1 | bar |    0 |   0 | hello0 | bar |   48 | hello48 | world | drop this |    0
    0 |   0 | hello0 | bar |    1 |   1 | hello1 | bar |    1 | hello1  | world | drop this |    1
    1 |   1 | hello1 | bar |    1 |   1 | hello1 | bar |    1 | hello1  | world | drop this |    1
    0 |   0 | hello0 | bar |    1 |   1 | hello1 | bar |    7 | hello7  | world | drop this |    1
    1 |   1 | hello1 | bar |    1 |   1 | hello1 | bar |    7 | hello7  | world | drop this |    1
    0 |   0 | hello0 | bar |    1 |   1 | hello1 | bar |   13 | hello13 | world | drop this |    1
    1 |   1 | hello1 | bar |    1 |   1 | hello1 | bar |   13 | hello13 | world | drop this |    1
    0 |   0 | hello0 | bar |    1 |   1 | hello1 | bar |   19 | hello19 | world | drop this |    1
    1 |   1 | hello1 | bar |    1 |   1 | hello1 | bar |   19 | hello19 | world | drop this |    1
    0 |   0 | hello0 | bar |    1 |   1 | hello1 | bar |   25 | hello25 | world | drop this |    1
    1 |   1 | hello1 | bar |    1 |   1 | hello1 | bar |   25 | hello25 | world | drop this |    1
    0 |   0 | hello0 | bar |    1 |   1 | hello1 | bar |   31 | hello31 | world | drop this |    1
    1 |   1 | hello1 | bar |    1 |   1 | hello1 | bar |   31 | hello31 | world | drop this |    1
    0 |   0 | hello0 | bar |    1 |   1 | hello1 | bar |   37 | hello37 | world | drop this |    1
    1 |   1 | hello1 | bar |    1 |   1 | hello1 | bar |   37 | hello37 | world | drop this |    1
    0 |   0 | hello0 | bar |    1 |   1 | hello1 | bar |   43 | hello43 | world | drop this |    1
    1 |   1 | hello1 | bar |    1 |   1 | hello1 | bar |   43 | hello43 | world | drop this |    1
    0 |   0 | hello0 | bar |    1 |   1 | hello1 | bar |   49 | hello49 | world | drop this |    1
    1 |   1 | hello1 | bar |    1 |   1 | hello1 | bar |   49 | hello49 | world | drop this |    1
(36 rows)

--
-- explain analyze
--
explain analyze select * from t, pt where tid = ptid;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=4.17..25.62 rows=19 width=50)
   Rows out:  18 rows at destination with 7.529 ms to first row, 7.724 ms to end, start offset by 3.639 ms.
   ->  Hash Join  (cost=4.17..25.62 rows=19 width=50)
         Hash Cond: dpe_single.pt.ptid = dpe_single.t.tid
         Rows out:  Avg 9.0 rows x 2 workers.  Max 9 rows (seg0) with 3.328 ms to first row, 5.966 ms to end, start offset by 5.040 ms.
         Executor memory:  1K bytes avg, 1K bytes max (seg0).
         Work_mem used:  1K bytes avg, 1K bytes max (seg0). Workfile: (0 spilling, 0 reused)
         (seg0)   Hash chain length 1.0 avg, 1 max, using 2 of 524341 buckets.
         InitPlan  (slice4)
           ->  Aggregate  (cost=2.03..2.04 rows=1 width=32)
                 Rows out:  0 rows (seg0) with 1.636 ms to first row, 1.637 ms to end, start offset by 1.173 ms.
                 ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..2.02 rows=1 width=19)
                       Rows out:  0 rows at destination (seg0) with 1.158 ms to first row, 1.168 ms to end, start offset by 1.174 ms.
                       ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
                             Rows out:  Avg 1.0 rows x 2 workers.  Max 1 rows (seg0) with 0.027 ms to first row, 0.031 ms to end, start offset by 2.189 ms.
         ->  Append  (cost=0.00..3.44 rows=11 width=31)
               Rows out:  Avg 9.0 rows x 2 workers.  Max 9 rows (seg0) with 0.090 ms to first row, 0.127 ms to end, start offset by 8.274 ms.
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603061::oid = ANY ($0)
                     Rows out:  (No row requested) 0 rows (seg0) with 0 ms to end.
                     ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..3.44 rows=11 width=31)
                           Rows out:  (No row requested) 0 rows (seg0) with 0 ms to end.
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603086::oid = ANY ($0)
                     Rows out:  9 rows (seg1) with 0.026 ms to first row, 0.036 ms to end, start offset by 8.635 ms.
                     ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..3.44 rows=11 width=31)
                           Rows out:  9 rows (seg1) with 0.019 ms to first row, 0.024 ms to end, start offset by 8.640 ms.
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603112::oid = ANY ($0)
                     Rows out:  9 rows (seg0) with 0.033 ms to first row, 0.047 ms to end, start offset by 8.330 ms.
                     ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..3.44 rows=11 width=31)
                           Rows out:  9 rows (seg0) with 0.022 ms to first row, 0.028 ms to end, start offset by 8.339 ms.
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603138::oid = ANY ($0)
                     Rows out:  (No row requested) 0 rows (seg0) with 0 ms to end.
                     ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..3.44 rows=11 width=31)
                           Rows out:  (No row requested) 0 rows (seg0) with 0 ms to end.
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603164::oid = ANY ($0)
                     Rows out:  (No row requested) 0 rows (seg0) with 0 ms to end.
                     ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..3.44 rows=11 width=31)
                           Rows out:  (No row requested) 0 rows (seg0) with 0 ms to end.
               ->  Result  (cost=0.00..3.44 rows=11 width=31)
                     One-Time Filter: 603190::oid = ANY ($0)
                     Rows out:  (No row requested) 0 rows (seg0) with 0 ms to end.
                     ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..3.44 rows=11 width=31)
                           Rows out:  (No row requested) 0 rows (seg0) with 0 ms to end.
         ->  Hash  (cost=2.08..2.08 rows=2 width=19)
               Rows in:  Avg 2.0 rows x 2 workers.  Max 2 rows (seg0) with 0.045 ms to end, start offset by 8.228 ms.
               ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..2.08 rows=2 width=19)
                     Rows out:  Avg 2.0 rows x 2 workers at destination.  Max 2 rows (seg0) with 0.025 ms to first row, 0.029 ms to end, start offset by 8.229 ms.
                     ->  Seq Scan on t  (cost=0.00..2.02 rows=1 width=19)
                           Rows out:  Avg 1.0 rows x 2 workers.  Max 1 rows (seg0) with 0.050 ms to first row, 0.055 ms to end, start offset by 5.858 ms.
 Slice statistics:
   (slice0)    Executor memory: 533K bytes.
   (slice1)    Executor memory: 371K bytes avg x 2 workers, 371K bytes max (seg0).
   (slice2)  _ Workers: 2 not dispatched.  Executor memory: 227K bytes avg x 2 workers, 227K bytes max (seg0).
   (slice3)    Executor memory: 6443K bytes avg x 2 workers, 6443K bytes max (seg0).  Work_mem: 1K bytes max.
   (slice4)    Executor memory: 533K bytes.
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  enable_bitmapscan=off; enable_hashjoin=on; enable_indexscan=off; enable_mergejoin=off; enable_nestloop=off; enable_seqscan=on; gp_segments_for_planner=2
 Total runtime: 11.961 ms
(63 rows)

--
-- Partitioned table on both sides of the join. This will create a result node as Append node is
-- not projection capable.
--
explain select * from pt, pt1 where pt.ptid = pt1.ptid and pt.pt1 = 'hello0' order by pt1.dist;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=50.86..50.95 rows=19 width=62)
   Merge Key: dist
   ->  Sort  (cost=50.86..50.95 rows=19 width=62)
         Sort Key: dpe_single.pt1.dist
         InitPlan  (slice4)
           ->  Aggregate  (cost=4.06..4.07 rows=1 width=32)
                 ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..4.05 rows=1 width=31)
                       ->  Result  (cost=0.00..4.05 rows=1 width=31)
                             ->  Append  (cost=0.00..4.05 rows=1 width=31)
                                   ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..4.05 rows=1 width=31)
                                         Filter: pt1 = 'hello0'::text
                                   ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..4.05 rows=1 width=31)
                                         Filter: pt1 = 'hello0'::text
                                   ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..4.05 rows=1 width=31)
                                         Filter: pt1 = 'hello0'::text
                                   ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..4.05 rows=1 width=31)
                                         Filter: pt1 = 'hello0'::text
                                   ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..4.05 rows=1 width=31)
                                         Filter: pt1 = 'hello0'::text
                                   ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..4.05 rows=1 width=31)
                                         Filter: pt1 = 'hello0'::text
         ->  Hash Join  (cost=24.41..45.86 rows=19 width=62)
               Hash Cond: dpe_single.pt1.ptid = dpe_single.pt.ptid
               ->  Append  (cost=0.00..3.44 rows=5 width=31)
                     ->  Result  (cost=0.00..3.44 rows=5 width=31)
                           One-Time Filter: 603314::oid = ANY ($0)
                           ->  Seq Scan on pt1_1_prt_junk_data pt1  (cost=0.00..3.44 rows=5 width=31)
                     ->  Result  (cost=0.00..3.44 rows=5 width=31)
                           One-Time Filter: 603339::oid = ANY ($0)
                           ->  Seq Scan on pt1_1_prt_2 pt1  (cost=0.00..3.44 rows=5 width=31)
                     ->  Result  (cost=0.00..3.44 rows=5 width=31)
                           One-Time Filter: 603365::oid = ANY ($0)
                           ->  Seq Scan on pt1_1_prt_3 pt1  (cost=0.00..3.44 rows=5 width=31)
                     ->  Result  (cost=0.00..3.44 rows=5 width=31)
                           One-Time Filter: 603391::oid = ANY ($0)
                           ->  Seq Scan on pt1_1_prt_4 pt1  (cost=0.00..3.44 rows=5 width=31)
                     ->  Result  (cost=0.00..3.44 rows=5 width=31)
                           One-Time Filter: 603417::oid = ANY ($0)
                           ->  Seq Scan on pt1_1_prt_5 pt1  (cost=0.00..3.44 rows=5 width=31)
                     ->  Result  (cost=0.00..3.44 rows=5 width=31)
                           One-Time Filter: 603443::oid = ANY ($0)
                           ->  Seq Scan on pt1_1_prt_6 pt1  (cost=0.00..3.44 rows=5 width=31)
               ->  Hash  (cost=24.36..24.36 rows=2 width=31)
                     ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..24.36 rows=2 width=31)
                           ->  Append  (cost=0.00..4.05 rows=1 width=31)
                                 ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..4.05 rows=1 width=31)
                                       Filter: pt1 = 'hello0'::text
                                 ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..4.05 rows=1 width=31)
                                       Filter: pt1 = 'hello0'::text
                                 ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..4.05 rows=1 width=31)
                                       Filter: pt1 = 'hello0'::text
                                 ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..4.05 rows=1 width=31)
                                       Filter: pt1 = 'hello0'::text
                                 ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..4.05 rows=1 width=31)
                                       Filter: pt1 = 'hello0'::text
                                 ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..4.05 rows=1 width=31)
                                       Filter: pt1 = 'hello0'::text
 Settings:  enable_bitmapscan=off; enable_hashjoin=on; enable_indexscan=off; enable_mergejoin=off; enable_nestloop=off; enable_seqscan=on; gp_segments_for_planner=2
(58 rows)

select * from pt, pt1 where pt.ptid = pt1.ptid and pt.pt1 = 'hello0' order by pt1.dist;
 dist |  pt1   |  pt2  |    pt3    | ptid | dist |   pt1   |  pt2  |    pt3    | ptid 
------+--------+-------+-----------+------+------+---------+-------+-----------+------
    0 | hello0 | world | drop this |    0 |    0 | hello0  | world | drop this |    0
    0 | hello0 | world | drop this |    0 |    6 | hello6  | world | drop this |    0
    0 | hello0 | world | drop this |    0 |   12 | hello12 | world | drop this |    0
    0 | hello0 | world | drop this |    0 |   18 | hello18 | world | drop this |    0
    0 | hello0 | world | drop this |    0 |   24 | hello24 | world | drop this |    0
    0 | hello0 | world | drop this |    0 |   30 | hello30 | world | drop this |    0
    0 | hello0 | world | drop this |    0 |   36 | hello36 | world | drop this |    0
    0 | hello0 | world | drop this |    0 |   42 | hello42 | world | drop this |    0
    0 | hello0 | world | drop this |    0 |   48 | hello48 | world | drop this |    0
(9 rows)

explain select count(*) from pt, pt1 where pt.ptid = pt1.ptid and pt.pt1 = 'hello0';
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=50.07..50.08 rows=1 width=8)
   InitPlan  (slice4)
     ->  Aggregate  (cost=4.06..4.07 rows=1 width=32)
           ->  Gather Motion 2:1  (slice3; segments: 2)  (cost=0.00..4.05 rows=1 width=4)
                 ->  Result  (cost=0.00..4.05 rows=1 width=4)
                       ->  Append  (cost=0.00..4.05 rows=1 width=4)
                             ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..4.05 rows=1 width=4)
                                   Filter: pt1 = 'hello0'::text
                             ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..4.05 rows=1 width=4)
                                   Filter: pt1 = 'hello0'::text
                             ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..4.05 rows=1 width=4)
                                   Filter: pt1 = 'hello0'::text
                             ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..4.05 rows=1 width=4)
                                   Filter: pt1 = 'hello0'::text
                             ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..4.05 rows=1 width=4)
                                   Filter: pt1 = 'hello0'::text
                             ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..4.05 rows=1 width=4)
                                   Filter: pt1 = 'hello0'::text
   ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=45.95..45.99 rows=1 width=8)
         ->  Aggregate  (cost=45.95..45.96 rows=1 width=8)
               ->  Hash Join  (cost=24.41..45.86 rows=19 width=0)
                     Hash Cond: dpe_single.pt1.ptid = dpe_single.pt.ptid
                     ->  Append  (cost=0.00..3.44 rows=5 width=4)
                           ->  Result  (cost=0.00..3.44 rows=5 width=4)
                                 One-Time Filter: 603314::oid = ANY ($0)
                                 ->  Seq Scan on pt1_1_prt_junk_data pt1  (cost=0.00..3.44 rows=5 width=4)
                           ->  Result  (cost=0.00..3.44 rows=5 width=4)
                                 One-Time Filter: 603339::oid = ANY ($0)
                                 ->  Seq Scan on pt1_1_prt_2 pt1  (cost=0.00..3.44 rows=5 width=4)
                           ->  Result  (cost=0.00..3.44 rows=5 width=4)
                                 One-Time Filter: 603365::oid = ANY ($0)
                                 ->  Seq Scan on pt1_1_prt_3 pt1  (cost=0.00..3.44 rows=5 width=4)
                           ->  Result  (cost=0.00..3.44 rows=5 width=4)
                                 One-Time Filter: 603391::oid = ANY ($0)
                                 ->  Seq Scan on pt1_1_prt_4 pt1  (cost=0.00..3.44 rows=5 width=4)
                           ->  Result  (cost=0.00..3.44 rows=5 width=4)
                                 One-Time Filter: 603417::oid = ANY ($0)
                                 ->  Seq Scan on pt1_1_prt_5 pt1  (cost=0.00..3.44 rows=5 width=4)
                           ->  Result  (cost=0.00..3.44 rows=5 width=4)
                                 One-Time Filter: 603443::oid = ANY ($0)
                                 ->  Seq Scan on pt1_1_prt_6 pt1  (cost=0.00..3.44 rows=5 width=4)
                     ->  Hash  (cost=24.36..24.36 rows=2 width=4)
                           ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..24.36 rows=2 width=4)
                                 ->  Append  (cost=0.00..4.05 rows=1 width=4)
                                       ->  Seq Scan on pt_1_prt_junk_data pt  (cost=0.00..4.05 rows=1 width=4)
                                             Filter: pt1 = 'hello0'::text
                                       ->  Seq Scan on pt_1_prt_2 pt  (cost=0.00..4.05 rows=1 width=4)
                                             Filter: pt1 = 'hello0'::text
                                       ->  Seq Scan on pt_1_prt_3 pt  (cost=0.00..4.05 rows=1 width=4)
                                             Filter: pt1 = 'hello0'::text
                                       ->  Seq Scan on pt_1_prt_4 pt  (cost=0.00..4.05 rows=1 width=4)
                                             Filter: pt1 = 'hello0'::text
                                       ->  Seq Scan on pt_1_prt_5 pt  (cost=0.00..4.05 rows=1 width=4)
                                             Filter: pt1 = 'hello0'::text
                                       ->  Seq Scan on pt_1_prt_6 pt  (cost=0.00..4.05 rows=1 width=4)
                                             Filter: pt1 = 'hello0'::text
 Settings:  enable_bitmapscan=off; enable_hashjoin=on; enable_indexscan=off; enable_mergejoin=off; enable_nestloop=off; enable_seqscan=on; gp_segments_for_planner=2
(57 rows)

select count(*) from pt, pt1 where pt.ptid = pt1.ptid and pt.pt1 = 'hello0';
 count 
-------
     9
(1 row)

--
-- Multi-level partitions
--
drop schema if exists dpe_multi cascade;
NOTICE:  schema "dpe_multi" does not exist, skipping
create schema dpe_multi;
set search_path='dpe_multi';
set gp_segments_for_planner=2;
create table dim1(dist int, pid int, code text, t1 text);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'dist' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into dim1 values (1, 0, 'OH', 'world1');
insert into dim1 values (1, 1, 'OH', 'world2');
insert into dim1 values (1, 100, 'GA', 'world2'); -- should not have a match at all
create table fact1(dist int, pid int, code text, u int)
partition by range(pid)
subpartition by list(code)
subpartition template 
(
 subpartition ca values('CA'),
 subpartition oh values('OH'),
 subpartition wa values('WA')
)
(
 start (0)
 end (4) 
 every (1)
);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'dist' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  CREATE TABLE will create partition "fact1_1_prt_1" for table "fact1"
NOTICE:  CREATE TABLE will create partition "fact1_1_prt_2" for table "fact1"
NOTICE:  CREATE TABLE will create partition "fact1_1_prt_3" for table "fact1"
NOTICE:  CREATE TABLE will create partition "fact1_1_prt_4" for table "fact1"
NOTICE:  CREATE TABLE will create partition "fact1_1_prt_1_2_prt_ca" for table "fact1_1_prt_1"
NOTICE:  CREATE TABLE will create partition "fact1_1_prt_1_2_prt_oh" for table "fact1_1_prt_1"
NOTICE:  CREATE TABLE will create partition "fact1_1_prt_1_2_prt_wa" for table "fact1_1_prt_1"
NOTICE:  CREATE TABLE will create partition "fact1_1_prt_2_2_prt_ca" for table "fact1_1_prt_2"
NOTICE:  CREATE TABLE will create partition "fact1_1_prt_2_2_prt_oh" for table "fact1_1_prt_2"
NOTICE:  CREATE TABLE will create partition "fact1_1_prt_2_2_prt_wa" for table "fact1_1_prt_2"
NOTICE:  CREATE TABLE will create partition "fact1_1_prt_3_2_prt_ca" for table "fact1_1_prt_3"
NOTICE:  CREATE TABLE will create partition "fact1_1_prt_3_2_prt_oh" for table "fact1_1_prt_3"
NOTICE:  CREATE TABLE will create partition "fact1_1_prt_3_2_prt_wa" for table "fact1_1_prt_3"
NOTICE:  CREATE TABLE will create partition "fact1_1_prt_4_2_prt_ca" for table "fact1_1_prt_4"
NOTICE:  CREATE TABLE will create partition "fact1_1_prt_4_2_prt_oh" for table "fact1_1_prt_4"
NOTICE:  CREATE TABLE will create partition "fact1_1_prt_4_2_prt_wa" for table "fact1_1_prt_4"
insert into fact1 select 1, i % 4 , 'OH', i from generate_series (1,100) i;
insert into fact1 select 1, i % 4 , 'CA', i + 10000 from generate_series (1,100) i;
--
-- Join on all partitioning columns
--
set gp_dynamic_partition_pruning=off;
explain select * from dim1 inner join fact1 on (dim1.pid=fact1.pid and dim1.code=fact1.code) order by fact1.u;
                                                                                              QUERY PLAN                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice2; segments: 2)  (cost=44.51..44.52 rows=2 width=62)
   Merge Key: "?column9?"
   ->  Sort  (cost=44.51..44.52 rows=2 width=62)
         Sort Key: dpe_multi.fact1.u
         ->  Hash Join  (cost=1.07..44.48 rows=2 width=62)
               Hash Cond: dpe_multi.fact1.pid = dim1.pid AND dpe_multi.fact1.code = dim1.code
               ->  Append  (cost=0.00..5.42 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_2_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_2_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_2_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_1_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_1_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_1_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_3_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_3_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_3_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_4_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_4_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_4_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=44)
               ->  Hash  (cost=1.04..1.04 rows=1 width=18)
                     ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..1.04 rows=1 width=18)
                           ->  Seq Scan on dim1  (cost=0.00..1.01 rows=1 width=18)
 Settings:  enable_bitmapscan=off; enable_hashjoin=on; enable_indexscan=off; enable_mergejoin=off; enable_nestloop=off; enable_seqscan=on; gp_dynamic_partition_pruning=off; gp_segments_for_planner=2
(23 rows)

select * from dim1 inner join fact1 on (dim1.pid=fact1.pid and dim1.code=fact1.code) order by fact1.u;
 dist | pid | code |   t1   | dist | pid | code |  u  
------+-----+------+--------+------+-----+------+-----
    1 |   1 | OH   | world2 |    1 |   1 | OH   |   1
    1 |   0 | OH   | world1 |    1 |   0 | OH   |   4
    1 |   1 | OH   | world2 |    1 |   1 | OH   |   5
    1 |   0 | OH   | world1 |    1 |   0 | OH   |   8
    1 |   1 | OH   | world2 |    1 |   1 | OH   |   9
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  12
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  13
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  16
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  17
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  20
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  21
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  24
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  25
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  28
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  29
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  32
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  33
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  36
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  37
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  40
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  41
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  44
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  45
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  48
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  49
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  52
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  53
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  56
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  57
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  60
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  61
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  64
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  65
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  68
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  69
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  72
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  73
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  76
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  77
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  80
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  81
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  84
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  85
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  88
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  89
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  92
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  93
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  96
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  97
    1 |   0 | OH   | world1 |    1 |   0 | OH   | 100
(50 rows)

set gp_dynamic_partition_pruning=on;
explain select * from dim1 inner join fact1 on (dim1.pid=fact1.pid and dim1.code=fact1.code) order by fact1.u;
                                                                                              QUERY PLAN                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=45.53..45.54 rows=2 width=62)
   Merge Key: "?column9?"
   ->  Sort  (cost=45.53..45.54 rows=2 width=62)
         Sort Key: dpe_multi.fact1.u
         InitPlan  (slice4)
           ->  Aggregate  (cost=1.01..1.02 rows=1 width=32)
                 ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..1.01 rows=1 width=18)
                       ->  Seq Scan on dim1  (cost=0.00..1.01 rows=1 width=18)
         ->  Hash Join  (cost=1.07..44.48 rows=2 width=62)
               Hash Cond: dpe_multi.fact1.pid = dpe_multi.dim1.pid AND dpe_multi.fact1.code = dpe_multi.dim1.code
               ->  Append  (cost=0.00..5.42 rows=1 width=44)
                     ->  Result  (cost=0.00..5.42 rows=1 width=44)
                           One-Time Filter: 604069::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_2_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Result  (cost=0.00..0.00 rows=1 width=44)
                           One-Time Filter: 604096::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_2_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=44)
                     ->  Result  (cost=0.00..5.42 rows=1 width=44)
                           One-Time Filter: 604042::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_2_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Result  (cost=0.00..5.42 rows=1 width=44)
                           One-Time Filter: 603935::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_1_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Result  (cost=0.00..5.42 rows=1 width=44)
                           One-Time Filter: 603962::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_1_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Result  (cost=0.00..0.00 rows=1 width=44)
                           One-Time Filter: 603989::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_1_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=44)
                     ->  Result  (cost=0.00..5.42 rows=1 width=44)
                           One-Time Filter: 604176::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_3_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Result  (cost=0.00..0.00 rows=1 width=44)
                           One-Time Filter: 604203::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_3_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=44)
                     ->  Result  (cost=0.00..5.42 rows=1 width=44)
                           One-Time Filter: 604149::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_3_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Result  (cost=0.00..5.42 rows=1 width=44)
                           One-Time Filter: 604256::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_4_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Result  (cost=0.00..5.42 rows=1 width=44)
                           One-Time Filter: 604283::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_4_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Result  (cost=0.00..0.00 rows=1 width=44)
                           One-Time Filter: 604310::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_4_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=44)
               ->  Hash  (cost=1.04..1.04 rows=1 width=18)
                     ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..1.04 rows=1 width=18)
                           ->  Seq Scan on dim1  (cost=0.00..1.01 rows=1 width=18)
 Settings:  enable_bitmapscan=off; enable_hashjoin=on; enable_indexscan=off; enable_mergejoin=off; enable_nestloop=off; enable_seqscan=on; gp_dynamic_partition_pruning=on; gp_segments_for_planner=2
(51 rows)

select * from dim1 inner join fact1 on (dim1.pid=fact1.pid and dim1.code=fact1.code) order by fact1.u;
 dist | pid | code |   t1   | dist | pid | code |  u  
------+-----+------+--------+------+-----+------+-----
    1 |   1 | OH   | world2 |    1 |   1 | OH   |   1
    1 |   0 | OH   | world1 |    1 |   0 | OH   |   4
    1 |   1 | OH   | world2 |    1 |   1 | OH   |   5
    1 |   0 | OH   | world1 |    1 |   0 | OH   |   8
    1 |   1 | OH   | world2 |    1 |   1 | OH   |   9
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  12
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  13
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  16
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  17
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  20
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  21
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  24
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  25
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  28
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  29
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  32
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  33
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  36
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  37
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  40
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  41
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  44
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  45
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  48
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  49
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  52
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  53
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  56
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  57
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  60
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  61
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  64
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  65
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  68
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  69
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  72
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  73
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  76
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  77
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  80
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  81
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  84
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  85
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  88
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  89
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  92
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  93
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  96
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  97
    1 |   0 | OH   | world1 |    1 |   0 | OH   | 100
(50 rows)

--
-- Join on one of the partitioning columns
--
set gp_dynamic_partition_pruning=off;
explain select * from dim1 inner join fact1 on (dim1.pid=fact1.pid) order by fact1.u;
                                                                                              QUERY PLAN                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice2; segments: 2)  (cost=44.49..44.50 rows=2 width=62)
   Merge Key: "?column9?"
   ->  Sort  (cost=44.49..44.50 rows=2 width=62)
         Sort Key: dpe_multi.fact1.u
         ->  Hash Join  (cost=1.06..44.47 rows=2 width=62)
               Hash Cond: dpe_multi.fact1.pid = dim1.pid
               ->  Append  (cost=0.00..5.42 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_2_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_2_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_2_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_1_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_1_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_1_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_3_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_3_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_3_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_4_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_4_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_4_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=44)
               ->  Hash  (cost=1.04..1.04 rows=1 width=18)
                     ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..1.04 rows=1 width=18)
                           ->  Seq Scan on dim1  (cost=0.00..1.01 rows=1 width=18)
 Settings:  enable_bitmapscan=off; enable_hashjoin=on; enable_indexscan=off; enable_mergejoin=off; enable_nestloop=off; enable_seqscan=on; gp_dynamic_partition_pruning=off; gp_segments_for_planner=2
(23 rows)

select * from dim1 inner join fact1 on (dim1.pid=fact1.pid) order by fact1.u;
 dist | pid | code |   t1   | dist | pid | code |   u   
------+-----+------+--------+------+-----+------+-------
    1 |   1 | OH   | world2 |    1 |   1 | OH   |     1
    1 |   0 | OH   | world1 |    1 |   0 | OH   |     4
    1 |   1 | OH   | world2 |    1 |   1 | OH   |     5
    1 |   0 | OH   | world1 |    1 |   0 | OH   |     8
    1 |   1 | OH   | world2 |    1 |   1 | OH   |     9
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    12
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    13
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    16
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    17
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    20
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    21
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    24
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    25
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    28
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    29
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    32
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    33
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    36
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    37
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    40
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    41
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    44
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    45
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    48
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    49
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    52
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    53
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    56
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    57
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    60
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    61
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    64
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    65
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    68
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    69
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    72
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    73
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    76
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    77
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    80
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    81
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    84
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    85
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    88
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    89
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    92
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    93
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    96
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    97
    1 |   0 | OH   | world1 |    1 |   0 | OH   |   100
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10001
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10004
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10005
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10008
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10009
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10012
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10013
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10016
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10017
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10020
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10021
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10024
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10025
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10028
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10029
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10032
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10033
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10036
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10037
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10040
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10041
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10044
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10045
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10048
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10049
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10052
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10053
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10056
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10057
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10060
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10061
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10064
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10065
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10068
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10069
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10072
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10073
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10076
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10077
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10080
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10081
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10084
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10085
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10088
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10089
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10092
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10093
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10096
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10097
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10100
(100 rows)

set gp_dynamic_partition_pruning=on;
explain select * from dim1 inner join fact1 on (dim1.pid=fact1.pid) order by fact1.u;
                                                                                              QUERY PLAN                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=45.52..45.53 rows=2 width=62)
   Merge Key: "?column9?"
   ->  Sort  (cost=45.52..45.53 rows=2 width=62)
         Sort Key: dpe_multi.fact1.u
         InitPlan  (slice4)
           ->  Aggregate  (cost=1.01..1.02 rows=1 width=32)
                 ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..1.01 rows=1 width=18)
                       ->  Seq Scan on dim1  (cost=0.00..1.01 rows=1 width=18)
         ->  Hash Join  (cost=1.06..44.47 rows=2 width=62)
               Hash Cond: dpe_multi.fact1.pid = dpe_multi.dim1.pid
               ->  Append  (cost=0.00..5.42 rows=1 width=44)
                     ->  Result  (cost=0.00..5.42 rows=1 width=44)
                           One-Time Filter: 604069::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_2_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Result  (cost=0.00..0.00 rows=1 width=44)
                           One-Time Filter: 604096::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_2_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=44)
                     ->  Result  (cost=0.00..5.42 rows=1 width=44)
                           One-Time Filter: 604042::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_2_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Result  (cost=0.00..5.42 rows=1 width=44)
                           One-Time Filter: 603935::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_1_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Result  (cost=0.00..5.42 rows=1 width=44)
                           One-Time Filter: 603962::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_1_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Result  (cost=0.00..0.00 rows=1 width=44)
                           One-Time Filter: 603989::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_1_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=44)
                     ->  Result  (cost=0.00..5.42 rows=1 width=44)
                           One-Time Filter: 604176::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_3_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Result  (cost=0.00..0.00 rows=1 width=44)
                           One-Time Filter: 604203::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_3_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=44)
                     ->  Result  (cost=0.00..5.42 rows=1 width=44)
                           One-Time Filter: 604149::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_3_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Result  (cost=0.00..5.42 rows=1 width=44)
                           One-Time Filter: 604256::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_4_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Result  (cost=0.00..5.42 rows=1 width=44)
                           One-Time Filter: 604283::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_4_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=44)
                     ->  Result  (cost=0.00..0.00 rows=1 width=44)
                           One-Time Filter: 604310::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_4_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=44)
               ->  Hash  (cost=1.04..1.04 rows=1 width=18)
                     ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..1.04 rows=1 width=18)
                           ->  Seq Scan on dim1  (cost=0.00..1.01 rows=1 width=18)
 Settings:  enable_bitmapscan=off; enable_hashjoin=on; enable_indexscan=off; enable_mergejoin=off; enable_nestloop=off; enable_seqscan=on; gp_dynamic_partition_pruning=on; gp_segments_for_planner=2
(51 rows)

select * from dim1 inner join fact1 on (dim1.pid=fact1.pid) order by fact1.u;
 dist | pid | code |   t1   | dist | pid | code |   u   
------+-----+------+--------+------+-----+------+-------
    1 |   1 | OH   | world2 |    1 |   1 | OH   |     1
    1 |   0 | OH   | world1 |    1 |   0 | OH   |     4
    1 |   1 | OH   | world2 |    1 |   1 | OH   |     5
    1 |   0 | OH   | world1 |    1 |   0 | OH   |     8
    1 |   1 | OH   | world2 |    1 |   1 | OH   |     9
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    12
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    13
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    16
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    17
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    20
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    21
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    24
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    25
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    28
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    29
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    32
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    33
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    36
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    37
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    40
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    41
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    44
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    45
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    48
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    49
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    52
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    53
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    56
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    57
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    60
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    61
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    64
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    65
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    68
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    69
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    72
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    73
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    76
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    77
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    80
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    81
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    84
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    85
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    88
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    89
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    92
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    93
    1 |   0 | OH   | world1 |    1 |   0 | OH   |    96
    1 |   1 | OH   | world2 |    1 |   1 | OH   |    97
    1 |   0 | OH   | world1 |    1 |   0 | OH   |   100
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10001
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10004
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10005
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10008
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10009
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10012
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10013
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10016
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10017
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10020
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10021
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10024
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10025
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10028
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10029
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10032
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10033
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10036
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10037
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10040
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10041
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10044
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10045
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10048
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10049
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10052
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10053
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10056
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10057
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10060
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10061
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10064
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10065
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10068
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10069
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10072
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10073
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10076
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10077
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10080
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10081
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10084
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10085
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10088
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10089
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10092
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10093
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10096
    1 |   1 | OH   | world2 |    1 |   1 | CA   | 10097
    1 |   0 | OH   | world1 |    1 |   0 | CA   | 10100
(100 rows)

--
-- Join on one of the partitioning columns and static elimination on other
--
set gp_dynamic_partition_pruning=off;
explain select * from dim1 inner join fact1 on (dim1.pid=fact1.pid) and fact1.code = 'OH' order by fact1.u;
                                                                                              QUERY PLAN                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice2; segments: 2)  (cost=27.23..27.24 rows=2 width=62)
   Merge Key: "?column9?"
   ->  Sort  (cost=27.23..27.24 rows=2 width=62)
         Sort Key: dpe_multi.fact1.u
         ->  Hash Join  (cost=1.06..27.21 rows=2 width=62)
               Hash Cond: dpe_multi.fact1.pid = dim1.pid
               ->  Append  (cost=0.00..6.53 rows=1 width=44)
                     ->  Seq Scan on fact1_1_prt_2_2_prt_oh fact1  (cost=0.00..6.53 rows=1 width=44)
                           Filter: code = 'OH'::text
                     ->  Seq Scan on fact1_1_prt_1_2_prt_oh fact1  (cost=0.00..6.53 rows=1 width=44)
                           Filter: code = 'OH'::text
                     ->  Seq Scan on fact1_1_prt_3_2_prt_oh fact1  (cost=0.00..6.53 rows=1 width=44)
                           Filter: code = 'OH'::text
                     ->  Seq Scan on fact1_1_prt_4_2_prt_oh fact1  (cost=0.00..6.53 rows=1 width=44)
                           Filter: code = 'OH'::text
               ->  Hash  (cost=1.04..1.04 rows=1 width=18)
                     ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..1.04 rows=1 width=18)
                           ->  Seq Scan on dim1  (cost=0.00..1.01 rows=1 width=18)
 Settings:  enable_bitmapscan=off; enable_hashjoin=on; enable_indexscan=off; enable_mergejoin=off; enable_nestloop=off; enable_seqscan=on; gp_dynamic_partition_pruning=off; gp_segments_for_planner=2
(19 rows)

select * from dim1 inner join fact1 on (dim1.pid=fact1.pid) and fact1.code = 'OH' order by fact1.u;
 dist | pid | code |   t1   | dist | pid | code |  u  
------+-----+------+--------+------+-----+------+-----
    1 |   1 | OH   | world2 |    1 |   1 | OH   |   1
    1 |   0 | OH   | world1 |    1 |   0 | OH   |   4
    1 |   1 | OH   | world2 |    1 |   1 | OH   |   5
    1 |   0 | OH   | world1 |    1 |   0 | OH   |   8
    1 |   1 | OH   | world2 |    1 |   1 | OH   |   9
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  12
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  13
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  16
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  17
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  20
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  21
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  24
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  25
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  28
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  29
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  32
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  33
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  36
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  37
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  40
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  41
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  44
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  45
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  48
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  49
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  52
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  53
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  56
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  57
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  60
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  61
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  64
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  65
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  68
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  69
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  72
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  73
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  76
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  77
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  80
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  81
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  84
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  85
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  88
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  89
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  92
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  93
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  96
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  97
    1 |   0 | OH   | world1 |    1 |   0 | OH   | 100
(50 rows)

set gp_dynamic_partition_pruning=on;
explain select * from dim1 inner join fact1 on (dim1.pid=fact1.pid) and fact1.code = 'OH' order by fact1.u;
                                                                                              QUERY PLAN                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=28.26..28.27 rows=2 width=62)
   Merge Key: "?column9?"
   ->  Sort  (cost=28.26..28.27 rows=2 width=62)
         Sort Key: dpe_multi.fact1.u
         InitPlan  (slice4)
           ->  Aggregate  (cost=1.01..1.02 rows=1 width=32)
                 ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..1.01 rows=1 width=18)
                       ->  Seq Scan on dim1  (cost=0.00..1.01 rows=1 width=18)
         ->  Hash Join  (cost=1.06..27.21 rows=2 width=62)
               Hash Cond: dpe_multi.fact1.pid = dpe_multi.dim1.pid
               ->  Append  (cost=0.00..6.53 rows=1 width=44)
                     ->  Result  (cost=0.00..6.53 rows=1 width=44)
                           One-Time Filter: 604069::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_2_2_prt_oh fact1  (cost=0.00..6.53 rows=1 width=44)
                                 Filter: code = 'OH'::text
                     ->  Result  (cost=0.00..6.53 rows=1 width=44)
                           One-Time Filter: 603962::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_1_2_prt_oh fact1  (cost=0.00..6.53 rows=1 width=44)
                                 Filter: code = 'OH'::text
                     ->  Result  (cost=0.00..6.53 rows=1 width=44)
                           One-Time Filter: 604176::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_3_2_prt_oh fact1  (cost=0.00..6.53 rows=1 width=44)
                                 Filter: code = 'OH'::text
                     ->  Result  (cost=0.00..6.53 rows=1 width=44)
                           One-Time Filter: 604283::oid = ANY ($0)
                           ->  Seq Scan on fact1_1_prt_4_2_prt_oh fact1  (cost=0.00..6.53 rows=1 width=44)
                                 Filter: code = 'OH'::text
               ->  Hash  (cost=1.04..1.04 rows=1 width=18)
                     ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..1.04 rows=1 width=18)
                           ->  Seq Scan on dim1  (cost=0.00..1.01 rows=1 width=18)
 Settings:  enable_bitmapscan=off; enable_hashjoin=on; enable_indexscan=off; enable_mergejoin=off; enable_nestloop=off; enable_seqscan=on; gp_dynamic_partition_pruning=on; gp_segments_for_planner=2
(31 rows)

select * from dim1 inner join fact1 on (dim1.pid=fact1.pid) and fact1.code = 'OH' order by fact1.u;
 dist | pid | code |   t1   | dist | pid | code |  u  
------+-----+------+--------+------+-----+------+-----
    1 |   1 | OH   | world2 |    1 |   1 | OH   |   1
    1 |   0 | OH   | world1 |    1 |   0 | OH   |   4
    1 |   1 | OH   | world2 |    1 |   1 | OH   |   5
    1 |   0 | OH   | world1 |    1 |   0 | OH   |   8
    1 |   1 | OH   | world2 |    1 |   1 | OH   |   9
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  12
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  13
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  16
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  17
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  20
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  21
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  24
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  25
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  28
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  29
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  32
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  33
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  36
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  37
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  40
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  41
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  44
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  45
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  48
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  49
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  52
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  53
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  56
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  57
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  60
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  61
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  64
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  65
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  68
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  69
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  72
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  73
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  76
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  77
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  80
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  81
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  84
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  85
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  88
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  89
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  92
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  93
    1 |   0 | OH   | world1 |    1 |   0 | OH   |  96
    1 |   1 | OH   | world2 |    1 |   1 | OH   |  97
    1 |   0 | OH   | world1 |    1 |   0 | OH   | 100
(50 rows)

--
-- add aggregates
--
set gp_dynamic_partition_pruning=off;
explain select fact1.code, count(*) from dim1 inner join fact1 on (dim1.pid=fact1.pid) group by 1 order by 1;
                                                                                              QUERY PLAN                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=44.54..44.54 rows=1 width=40)
   Merge Key: code
   ->  Sort  (cost=44.54..44.54 rows=1 width=40)
         Sort Key: partial_aggregation.code
         ->  HashAggregate  (cost=44.52..44.53 rows=1 width=40)
               Group By: dpe_multi.fact1.code
               ->  Redistribute Motion 2:2  (slice2; segments: 2)  (cost=44.48..44.50 rows=1 width=40)
                     Hash Key: dpe_multi.fact1.code
                     ->  HashAggregate  (cost=44.48..44.48 rows=1 width=40)
                           Group By: dpe_multi.fact1.code
                           ->  Hash Join  (cost=1.06..44.47 rows=2 width=32)
                                 Hash Cond: dpe_multi.fact1.pid = dim1.pid
                                 ->  Append  (cost=0.00..5.42 rows=1 width=36)
                                       ->  Seq Scan on fact1_1_prt_2_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=36)
                                       ->  Seq Scan on fact1_1_prt_2_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=36)
                                       ->  Seq Scan on fact1_1_prt_2_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=36)
                                       ->  Seq Scan on fact1_1_prt_1_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=36)
                                       ->  Seq Scan on fact1_1_prt_1_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=36)
                                       ->  Seq Scan on fact1_1_prt_1_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=36)
                                       ->  Seq Scan on fact1_1_prt_3_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=36)
                                       ->  Seq Scan on fact1_1_prt_3_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=36)
                                       ->  Seq Scan on fact1_1_prt_3_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=36)
                                       ->  Seq Scan on fact1_1_prt_4_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=36)
                                       ->  Seq Scan on fact1_1_prt_4_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=36)
                                       ->  Seq Scan on fact1_1_prt_4_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=36)
                                 ->  Hash  (cost=1.04..1.04 rows=1 width=4)
                                       ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..1.04 rows=1 width=4)
                                             ->  Seq Scan on dim1  (cost=0.00..1.01 rows=1 width=4)
 Settings:  enable_bitmapscan=off; enable_hashjoin=on; enable_indexscan=off; enable_mergejoin=off; enable_nestloop=off; enable_seqscan=on; gp_dynamic_partition_pruning=off; gp_segments_for_planner=2
(29 rows)

select fact1.code, count(*) from dim1 inner join fact1 on (dim1.pid=fact1.pid) group by 1 order by 1;
 code | count 
------+-------
 CA   |    50
 OH   |    50
(2 rows)

set gp_dynamic_partition_pruning=on;
explain select fact1.code, count(*) from dim1 inner join fact1 on (dim1.pid=fact1.pid) group by 1 order by 1;
                                                                                              QUERY PLAN                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice4; segments: 2)  (cost=45.56..45.57 rows=1 width=40)
   Merge Key: code
   ->  Sort  (cost=45.56..45.57 rows=1 width=40)
         Sort Key: partial_aggregation.code
         InitPlan  (slice5)
           ->  Aggregate  (cost=1.01..1.02 rows=1 width=32)
                 ->  Gather Motion 2:1  (slice3; segments: 2)  (cost=0.00..1.01 rows=1 width=4)
                       ->  Seq Scan on dim1  (cost=0.00..1.01 rows=1 width=4)
         ->  HashAggregate  (cost=44.52..44.53 rows=1 width=40)
               Group By: dpe_multi.fact1.code
               ->  Redistribute Motion 2:2  (slice2; segments: 2)  (cost=44.48..44.50 rows=1 width=40)
                     Hash Key: dpe_multi.fact1.code
                     ->  HashAggregate  (cost=44.48..44.48 rows=1 width=40)
                           Group By: dpe_multi.fact1.code
                           ->  Hash Join  (cost=1.06..44.47 rows=2 width=32)
                                 Hash Cond: dpe_multi.fact1.pid = dpe_multi.dim1.pid
                                 ->  Append  (cost=0.00..5.42 rows=1 width=36)
                                       ->  Result  (cost=0.00..5.42 rows=1 width=36)
                                             One-Time Filter: 604069::oid = ANY ($0)
                                             ->  Seq Scan on fact1_1_prt_2_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=36)
                                       ->  Result  (cost=0.00..0.00 rows=1 width=36)
                                             One-Time Filter: 604096::oid = ANY ($0)
                                             ->  Seq Scan on fact1_1_prt_2_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=36)
                                       ->  Result  (cost=0.00..5.42 rows=1 width=36)
                                             One-Time Filter: 604042::oid = ANY ($0)
                                             ->  Seq Scan on fact1_1_prt_2_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=36)
                                       ->  Result  (cost=0.00..5.42 rows=1 width=36)
                                             One-Time Filter: 603935::oid = ANY ($0)
                                             ->  Seq Scan on fact1_1_prt_1_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=36)
                                       ->  Result  (cost=0.00..5.42 rows=1 width=36)
                                             One-Time Filter: 603962::oid = ANY ($0)
                                             ->  Seq Scan on fact1_1_prt_1_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=36)
                                       ->  Result  (cost=0.00..0.00 rows=1 width=36)
                                             One-Time Filter: 603989::oid = ANY ($0)
                                             ->  Seq Scan on fact1_1_prt_1_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=36)
                                       ->  Result  (cost=0.00..5.42 rows=1 width=36)
                                             One-Time Filter: 604176::oid = ANY ($0)
                                             ->  Seq Scan on fact1_1_prt_3_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=36)
                                       ->  Result  (cost=0.00..0.00 rows=1 width=36)
                                             One-Time Filter: 604203::oid = ANY ($0)
                                             ->  Seq Scan on fact1_1_prt_3_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=36)
                                       ->  Result  (cost=0.00..5.42 rows=1 width=36)
                                             One-Time Filter: 604149::oid = ANY ($0)
                                             ->  Seq Scan on fact1_1_prt_3_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=36)
                                       ->  Result  (cost=0.00..5.42 rows=1 width=36)
                                             One-Time Filter: 604256::oid = ANY ($0)
                                             ->  Seq Scan on fact1_1_prt_4_2_prt_ca fact1  (cost=0.00..5.42 rows=1 width=36)
                                       ->  Result  (cost=0.00..5.42 rows=1 width=36)
                                             One-Time Filter: 604283::oid = ANY ($0)
                                             ->  Seq Scan on fact1_1_prt_4_2_prt_oh fact1  (cost=0.00..5.42 rows=1 width=36)
                                       ->  Result  (cost=0.00..0.00 rows=1 width=36)
                                             One-Time Filter: 604310::oid = ANY ($0)
                                             ->  Seq Scan on fact1_1_prt_4_2_prt_wa fact1  (cost=0.00..0.00 rows=1 width=36)
                                 ->  Hash  (cost=1.04..1.04 rows=1 width=4)
                                       ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..1.04 rows=1 width=4)
                                             ->  Seq Scan on dim1  (cost=0.00..1.01 rows=1 width=4)
 Settings:  enable_bitmapscan=off; enable_hashjoin=on; enable_indexscan=off; enable_mergejoin=off; enable_nestloop=off; enable_seqscan=on; gp_dynamic_partition_pruning=on; gp_segments_for_planner=2
(57 rows)

select fact1.code, count(*) from dim1 inner join fact1 on (dim1.pid=fact1.pid) group by 1 order by 1;
 code | count 
------+-------
 CA   |    50
 OH   |    50
(2 rows)

--
-- multi-attribute list partitioning
--
drop schema if exists dpe_malp cascade;
NOTICE:  schema "dpe_malp" does not exist, skipping
create schema dpe_malp;
set search_path='dpe_malp';
set gp_segments_for_planner=2;
create table malp (i int, j int, t text) 
distributed by (i) 
partition by list (i, j) 
( 
partition p1 values((1,10)) ,
partition p2 values((2,20)),
partition p3 values((3,30)) 
);
NOTICE:  CREATE TABLE will create partition "malp_1_prt_p1" for table "malp"
NOTICE:  CREATE TABLE will create partition "malp_1_prt_p2" for table "malp"
NOTICE:  CREATE TABLE will create partition "malp_1_prt_p3" for table "malp"
insert into malp select 1, 10, 'hello1';
insert into malp select 1, 10, 'hello2';
insert into malp select 1, 10, 'hello3';
insert into malp select 2, 20, 'hello4';
insert into malp select 2, 20, 'hello5';
insert into malp select 3, 30, 'hello6';
create table dim(i int, j int)
distributed randomly;
insert into dim values(1, 10);
analyze malp;
analyze dim;
explain select * from dim inner join malp on (dim.i = malp.i);
                                                                                              QUERY PLAN                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=2.07..19.18 rows=3 width=23)
   ->  Hash Join  (cost=2.07..19.18 rows=3 width=23)
         Hash Cond: dpe_malp.malp.i = dpe_malp.dim.i
         InitPlan  (slice4)
           ->  Aggregate  (cost=1.01..1.02 rows=1 width=32)
                 ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=0.00..1.01 rows=1 width=8)
                       ->  Seq Scan on dim  (cost=0.00..1.01 rows=1 width=8)
         ->  Append  (cost=0.00..5.67 rows=3 width=15)
               ->  Result  (cost=0.00..5.67 rows=3 width=15)
                     One-Time Filter: 604561::oid = ANY ($0)
                     ->  Seq Scan on malp_1_prt_p1 malp  (cost=0.00..5.67 rows=3 width=15)
               ->  Result  (cost=0.00..5.67 rows=3 width=15)
                     One-Time Filter: 604587::oid = ANY ($0)
                     ->  Seq Scan on malp_1_prt_p2 malp  (cost=0.00..5.67 rows=3 width=15)
               ->  Result  (cost=0.00..5.67 rows=3 width=15)
                     One-Time Filter: 604613::oid = ANY ($0)
                     ->  Seq Scan on malp_1_prt_p3 malp  (cost=0.00..5.67 rows=3 width=15)
         ->  Hash  (cost=1.03..1.03 rows=1 width=8)
               ->  Redistribute Motion 2:2  (slice1; segments: 2)  (cost=0.00..1.03 rows=1 width=8)
                     Hash Key: dpe_malp.dim.i
                     ->  Seq Scan on dim  (cost=0.00..1.01 rows=1 width=8)
 Settings:  enable_bitmapscan=off; enable_hashjoin=on; enable_indexscan=off; enable_mergejoin=off; enable_nestloop=off; enable_seqscan=on; gp_dynamic_partition_pruning=on; gp_segments_for_planner=2
(22 rows)

set gp_dynamic_partition_pruning = off;
select * from dim inner join malp on (dim.i = malp.i);
 i | j  | i | j  |   t    
---+----+---+----+--------
 1 | 10 | 1 | 10 | hello1
 1 | 10 | 1 | 10 | hello2
 1 | 10 | 1 | 10 | hello3
(3 rows)

set gp_dynamic_partition_pruning = on;
select * from dim inner join malp on (dim.i = malp.i);
 i | j  | i | j  |   t    
---+----+---+----+--------
 1 | 10 | 1 | 10 | hello1
 1 | 10 | 1 | 10 | hello2
 1 | 10 | 1 | 10 | hello3
(3 rows)

set gp_dynamic_partition_pruning = on;
select * from dim inner join malp on (dim.i = malp.i and dim.j = malp.j); -- only one partition should be chosen
 i | j  | i | j  |   t    
---+----+---+----+--------
 1 | 10 | 1 | 10 | hello1
 1 | 10 | 1 | 10 | hello2
 1 | 10 | 1 | 10 | hello3
(3 rows)

--
-- bugs
--
drop schema if exists dpe_bugs cascade;
NOTICE:  schema "dpe_bugs" does not exist, skipping
create schema dpe_bugs;
set search_path='dpe_bugs';
set gp_segments_for_planner=2;
create table pat(a int, b date) partition by range (b) (start ('2010-01-01') end ('2010-01-05') every (1), default partition other);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  CREATE TABLE will create partition "pat_1_prt_other" for table "pat"
NOTICE:  CREATE TABLE will create partition "pat_1_prt_2" for table "pat"
NOTICE:  CREATE TABLE will create partition "pat_1_prt_3" for table "pat"
NOTICE:  CREATE TABLE will create partition "pat_1_prt_4" for table "pat"
NOTICE:  CREATE TABLE will create partition "pat_1_prt_5" for table "pat"
insert into pat select i,date '2010-01-01' + i from generate_series(1, 10)i;  
create table jpat(a int, b date);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into jpat values(1, '2010-01-02');
explain select * from (select count(*) over (order by a rows between 1 preceding and 1 following), a, b from jpat)jpat inner join pat using(b);
                                                                                              QUERY PLAN                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice4; segments: 2)  (cost=1.10..39.62 rows=2 width=20)
   ->  Hash Join  (cost=1.10..39.62 rows=2 width=20)
         Hash Cond: dpe_bugs.pat.b = jpat.b
         ->  Redistribute Motion 2:2  (slice1; segments: 2)  (cost=0.00..38.48 rows=1 width=8)
               Hash Key: dpe_bugs.pat.b
               ->  Append  (cost=0.00..9.61 rows=1 width=8)
                     ->  Seq Scan on pat_1_prt_other pat  (cost=0.00..9.61 rows=1 width=8)
                     ->  Seq Scan on pat_1_prt_2 pat  (cost=0.00..0.00 rows=1 width=8)
                     ->  Seq Scan on pat_1_prt_3 pat  (cost=0.00..9.61 rows=1 width=8)
                     ->  Seq Scan on pat_1_prt_4 pat  (cost=0.00..9.61 rows=1 width=8)
                     ->  Seq Scan on pat_1_prt_5 pat  (cost=0.00..9.61 rows=1 width=8)
         ->  Hash  (cost=1.09..1.09 rows=1 width=16)
               ->  Redistribute Motion 1:2  (slice3; segments: 1)  (cost=1.02..1.09 rows=1 width=16)
                     Hash Key: jpat.b
                     ->  Subquery Scan jpat  (cost=1.02..1.06 rows=2 width=16)
                           ->  Window  (cost=1.02..1.05 rows=1 width=8)
                                 Order By: dpe_bugs.jpat.a
                                 ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=1.02..1.04 rows=1 width=8)
                                       Merge Key: dpe_bugs.jpat.a
                                       ->  Sort  (cost=1.02..1.02 rows=1 width=8)
                                             Sort Key: dpe_bugs.jpat.a
                                             ->  Seq Scan on jpat  (cost=0.00..1.01 rows=1 width=8)
 Settings:  enable_bitmapscan=off; enable_hashjoin=on; enable_indexscan=off; enable_mergejoin=off; enable_nestloop=off; enable_seqscan=on; gp_dynamic_partition_pruning=on; gp_segments_for_planner=2
(23 rows)

select * from (select count(*) over (order by a rows between 1 preceding and 1 following), a, b from jpat)jpat inner join pat using(b);
     b      | count | a | a 
------------+-------+---+---
 01-02-2010 |     1 | 1 | 1
(1 row)

