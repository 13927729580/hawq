CREATE OR REPLACE FUNCTION find_num_segno
(
  table_name character varying
)
RETURNS integer AS
$$
DECLARE
  oid integer;
  distinct_count integer;
BEGIN
EXECUTE 'select oid from pg_class where relname = ''' || table_name || '''' into oid;
EXECUTE 'select count(distinct segno) from pg_aoseg.pg_aoseg_' || oid into distinct_count;
return distinct_count;
END;
$$ LANGUAGE PLPGSQL;
CREATE OR REPLACE FUNCTION find_num_segno_co
(
  table_name character varying
)
RETURNS integer AS
$$
DECLARE
  oid integer;
  distinct_count integer;
BEGIN
EXECUTE 'select oid from pg_class where relname = ''' || table_name || '''' into oid;
EXECUTE 'select count(distinct segno) from pg_aoseg.pg_aocsseg_' || oid into distinct_count;
return distinct_count;
END;
$$ LANGUAGE PLPGSQL;
--Testcase 1: (AO alter table test)
create table t1(c1 int, c2 int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t1 values(1,1);
insert into t1 values(2,2);
alter table t1 alter column c1 type int;
insert into t1 values(3,3);
insert into t1 values(4,4);
select * from t1 order by c1, c2;
 c1 | c2 
----+----
  1 |  1
  2 |  2
  3 |  3
  4 |  4
(4 rows)

select find_num_segno('t1');
ERROR:  relation "pg_aoseg.pg_aoseg_295944" does not exist
LINE 1: select count(distinct segno) from pg_aoseg.pg_aoseg_295944
                                          ^
QUERY:  select count(distinct segno) from pg_aoseg.pg_aoseg_295944
CONTEXT:  PL/pgSQL function "find_num_segno" line 6 at execute statement
insert into t1 select * from t1;
select * from t1 order by c1, c2;
 c1 | c2 
----+----
  1 |  1
  1 |  1
  2 |  2
  2 |  2
  3 |  3
  3 |  3
  4 |  4
  4 |  4
(8 rows)

drop table t1;
--Testcase 2: (AO concurrent insert test)
create table test (a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
\! echo "insert into test select i from generate_series(1,10)i;" >> out1.sql; gptorment.pl -connect '-p $PGPORT -d regression' -sqlfile out1.sql -parallel 3 &> /dev/null
select find_num_segno('test');
 find_num_segno 
----------------
              3
(1 row)

select * from test where a = 1;
 a 
---
 1
 1
 1
(3 rows)

insert into test select * from test;
select * from test where a = 1;
 a 
---
 1
 1
 1
 1
 1
 1
(6 rows)

drop table test;
\! rm out1.sql
--Testcase 3: (AOCO alter table test)
create table t1(c1 int, c2 int) with (appendonly = true, orientation = column);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t1 values(1,1);
insert into t1 values(2,2);
alter table t1 alter column c1 type int;
insert into t1 values(3,3);
insert into t1 values(4,4);
select * from t1 order by c1, c2;
 c1 | c2 
----+----
  1 |  1
  2 |  2
  3 |  3
  4 |  4
(4 rows)

select find_num_segno_co('t1');
ERROR:  relation "pg_aoseg.pg_aocsseg_295990" does not exist
LINE 1: select count(distinct segno) from pg_aoseg.pg_aocsseg_295990
                                          ^
QUERY:  select count(distinct segno) from pg_aoseg.pg_aocsseg_295990
CONTEXT:  PL/pgSQL function "find_num_segno_co" line 6 at execute statement
insert into t1 select * from t1;
select * from t1 order by c1, c2;
 c1 | c2 
----+----
  1 |  1
  1 |  1
  2 |  2
  2 |  2
  3 |  3
  3 |  3
  4 |  4
  4 |  4
(8 rows)

drop table t1;
--Testcase 4: (AOCO conÃ§urrent insert test)
create table test (a int, b int) with (appendonly = true, orientation = column);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
\! echo "insert into test select i,i  from generate_series(1,10)i;" >> out2.sql; gptorment.pl -connect '-p $PGPORT -d regression' -sqlfile out2.sql -parallel 3 &> /dev/null
select find_num_segno_co('test');
 find_num_segno_co 
-------------------
                 3
(1 row)

select * from test where a = 1 order by a, b;
 a | b 
---+---
 1 | 1
 1 | 1
 1 | 1
(3 rows)

insert into test select * from test;
select * from test where a = 1 order by a, b;
 a | b 
---+---
 1 | 1
 1 | 1
 1 | 1
 1 | 1
 1 | 1
 1 | 1
(6 rows)

drop table test;
\! rm out2.sql
--Testcase 5: (copy command test)
create table test2 (a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into test2 select i from generate_series(1, 10)i;
copy test2 TO '/tmp/test2.csv' CSV;
\! echo "copy test2 from '/tmp/test2.csv';" >> out3.sql; gptorment.pl -connect '-p $PGPORT -d regression' -sqlfile out3.sql -parallel 3 &> /dev/null
select find_num_segno('test2');
 find_num_segno 
----------------
              3
(1 row)

select * from test2 where a = 1;
 a 
---
 1
 1
 1
 1
(4 rows)

insert into test2 select * from test2;
select * from test2 where a = 1;
 a 
---
 1
 1
 1
 1
 1
 1
 1
 1
(8 rows)

drop table test2;
\! rm out3.sql /tmp/test2.csv
--Testcase 6: (partition table test)
create table pt_table(a int, b int) distributed by (a) partition by range(b) (default partition others,start(1) end(100) every(10));
NOTICE:  CREATE TABLE will create partition "pt_table_1_prt_others" for table "pt_table"
NOTICE:  CREATE TABLE will create partition "pt_table_1_prt_2" for table "pt_table"
NOTICE:  CREATE TABLE will create partition "pt_table_1_prt_3" for table "pt_table"
NOTICE:  CREATE TABLE will create partition "pt_table_1_prt_4" for table "pt_table"
NOTICE:  CREATE TABLE will create partition "pt_table_1_prt_5" for table "pt_table"
NOTICE:  CREATE TABLE will create partition "pt_table_1_prt_6" for table "pt_table"
NOTICE:  CREATE TABLE will create partition "pt_table_1_prt_7" for table "pt_table"
NOTICE:  CREATE TABLE will create partition "pt_table_1_prt_8" for table "pt_table"
NOTICE:  CREATE TABLE will create partition "pt_table_1_prt_9" for table "pt_table"
NOTICE:  CREATE TABLE will create partition "pt_table_1_prt_10" for table "pt_table"
NOTICE:  CREATE TABLE will create partition "pt_table_1_prt_11" for table "pt_table"
\! echo "insert into pt_table select i,i from generate_series(1,100)i;" >> out4.sql; gptorment.pl -connect '-p $PGPORT -d regression' -sqlfile out4.sql -parallel 3 &> /dev/null
select * from pt_table where a = 1 order by a, b;
 a | b 
---+---
 1 | 1
 1 | 1
 1 | 1
(3 rows)

select find_num_segno('pt_table');
 find_num_segno 
----------------
              3
(1 row)

insert into pt_table select * from pt_table;
select * from pt_table where a = 1 order by a, b;
 a | b 
---+---
 1 | 1
 1 | 1
 1 | 1
 1 | 1
 1 | 1
 1 | 1
(6 rows)

drop table pt_table;
\! rm out4.sql
--Testcase 7: (function test)
create table func (a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into func values(1,1);
insert into func values(2,2);
alter table func alter column a type int;
insert into func values(3,3);
insert into func values(4,4);
select * from func order by a, b;
 a | b 
---+---
 1 | 1
 2 | 2
 3 | 3
 4 | 4
(4 rows)

select find_num_segno('func');
ERROR:  relation "pg_aoseg.pg_aoseg_296244" does not exist
LINE 1: select count(distinct segno) from pg_aoseg.pg_aoseg_296244
                                          ^
QUERY:  select count(distinct segno) from pg_aoseg.pg_aoseg_296244
CONTEXT:  PL/pgSQL function "find_num_segno" line 6 at execute statement
CREATE OR REPLACE FUNCTION table_insert
(
  table_name character varying
)
RETURNS integer AS
$$
DECLARE
  number_of_rows integer;
BEGIN
EXECUTE 'INSERT INTO ' || table_name || ' SELECT * FROM ' || table_name;
EXECUTE 'SELECT count(*) FROM ' || table_name INTO number_of_rows;
return number_of_rows;
END;
$$ LANGUAGE PLPGSQL;
select table_insert('func');
 table_insert 
--------------
            8
(1 row)

select * from func order by a, b;
 a | b 
---+---
 1 | 1
 1 | 1
 2 | 2
 2 | 2
 3 | 3
 3 | 3
 4 | 4
 4 | 4
(8 rows)

drop table func;
