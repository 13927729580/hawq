--
-- COPY
--

-- copy from create_table
CREATE TABLE aggtest (
    a           int2,
    b           float4
);

CREATE TABLE tenk1 (
    unique1     int4,
    unique2     int4,
    two         int4,
    four        int4,
    ten         int4,
    twenty      int4,
    hundred     int4,
    thousand    int4,
    twothousand int4,
    fivethous   int4,
    tenthous    int4,
    odd         int4,
    even        int4,
    stringu1    name,
    stringu2    name,
    string4     name
) WITH OIDS;

CREATE TABLE slow_emp4000 (
    home_base    box
);

CREATE TABLE person (
    name        text,
    age         int4,
    location    point
);

CREATE TABLE onek (
    unique1     int4,
    unique2     int4,
    two         int4,
    four        int4,
    ten         int4,
    twenty      int4,
    hundred     int4,
    thousand    int4,
    twothousand int4,
    fivethous   int4,
    tenthous    int4,
    odd         int4,
    even        int4,
    stringu1    name,
    stringu2    name,
    string4     name
);

CREATE TABLE emp (
    salary      int4,
    manager     name
) INHERITS (person) WITH OIDS;


CREATE TABLE student (
    gpa         float8
) INHERITS (person);


CREATE TABLE stud_emp (
    percent     int4
) INHERITS (emp, student);

CREATE TABLE real_city (
    pop         int4,
    cname       text,
    outline     path
);

CREATE TABLE road (
    name        text,
    thepath     path
);

CREATE TABLE hash_i4_heap (
    seqno       int4,
    random      int4
);

CREATE TABLE hash_name_heap (
    seqno       int4,
    random      name
);

CREATE TABLE hash_txt_heap (
    seqno       int4,
    random      text
);

CREATE TABLE hash_f8_heap (
    seqno       int4,
    random      float8
);

CREATE TABLE bt_i4_heap (
    seqno       int4,
    random      int4
);

CREATE TABLE bt_name_heap (
    seqno       name,
    random      int4
);

CREATE TABLE bt_txt_heap (
    seqno       text,
    random      int4
);

CREATE TABLE bt_f8_heap (
    seqno       float8,
    random      int4
);

CREATE TABLE array_op_test (
    seqno       int4,
    i           int4[],
    t           text[]
);

CREATE TABLE array_index_op_test (
    seqno       int4,
    i           int4[],
    t           text[]
);

-- CLASS POPULATION
--	(any resemblance to real life is purely coincidental)
--
COPY aggtest FROM '@abs_srcdir@/data/agg.data';

COPY onek FROM '@abs_srcdir@/data/onek.data';

COPY onek TO '@abs_builddir@/results/onek.data';

TRUNCATE onek;

COPY onek FROM '@abs_builddir@/results/onek.data';

COPY tenk1 FROM '@abs_srcdir@/data/tenk.data';

COPY slow_emp4000 FROM '@abs_srcdir@/data/rect.data';

COPY person FROM '@abs_srcdir@/data/person.data';

COPY emp FROM '@abs_srcdir@/data/emp.data';

COPY student FROM '@abs_srcdir@/data/student.data';

COPY stud_emp FROM '@abs_srcdir@/data/stud_emp.data';

COPY road FROM '@abs_srcdir@/data/streets.data';

COPY real_city FROM '@abs_srcdir@/data/real_city.data';

COPY hash_i4_heap FROM '@abs_srcdir@/data/hash.data';

COPY hash_name_heap FROM '@abs_srcdir@/data/hash.data';

COPY hash_txt_heap FROM '@abs_srcdir@/data/hash.data';

COPY hash_f8_heap FROM '@abs_srcdir@/data/hash.data';

-- the data in this file has a lot of duplicates in the index key
-- fields, leading to long bucket chains and lots of table expansion.
-- this is therefore a stress test of the bucket overflow code (unlike
-- the data in hash.data, which has unique index keys).
--
-- COPY hash_ovfl_heap FROM '@abs_srcdir@/data/hashovfl.data';

COPY bt_i4_heap FROM '@abs_srcdir@/data/desc.data';

COPY bt_name_heap FROM '@abs_srcdir@/data/hash.data';

COPY bt_txt_heap FROM '@abs_srcdir@/data/desc.data';

COPY bt_f8_heap FROM '@abs_srcdir@/data/hash.data';

COPY array_op_test FROM '@abs_srcdir@/data/array.data';

COPY array_index_op_test FROM '@abs_srcdir@/data/array.data';

--- test copying in CSV mode with various styles
--- of embedded line ending characters

create temp table copytest (
	style	text,
	test 	text,
	filler	int);

insert into copytest values('DOS',E'abc\r\ndef',1);
insert into copytest values('Unix',E'abc\ndef',2);
insert into copytest values('Mac',E'abc\rdef',3);
insert into copytest values(E'esc\\ape',E'a\\r\\\r\\\n\\nb',4);

copy copytest to '@abs_builddir@/results/copytest.csv' csv;

create temp table copytest2 (like copytest);

copy copytest2 from '@abs_builddir@/results/copytest.csv' csv;

select * from copytest except select * from copytest2 order by 1,2,3;

truncate copytest2;

--- same test but with an escape char different from quote char

copy copytest to '@abs_builddir@/results/copytest.csv' csv quote '''' escape E'\\';

copy copytest2 from '@abs_builddir@/results/copytest.csv' csv quote '''' escape E'\\';

select * from copytest except select * from copytest2 order by 1,2,3;


-- test header line feature

create temp table copytest3 (
	c1 int, 
	"col with , comma" text, 
	"col with "" quote"  int);

copy copytest3 from stdin csv header;
this is just a line full of junk that would error out if parsed
1,a,1
2,b,2
\.

copy copytest3 to stdout csv header;

DROP TABLE aggtest;
DROP TABLE tenk1;
DROP TABLE slow_emp4000;
DROP TABLE onek;
DROP TABLE road;
DROP TABLE hash_i4_heap;
DROP TABLE real_city;
DROP TABLE hash_name_heap;
DROP TABLE hash_txt_heap;
DROP TABLE hash_f8_heap;
DROP TABLE stud_emp;
DROP TABLE student;
DROP TABLE emp;
DROP TABLE person;

