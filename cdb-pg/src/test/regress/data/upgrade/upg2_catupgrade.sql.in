--
-- Catalog Upgrade Script
--
--   This script has 3 parts
--   1. Pre-upgrade setup
--   2. Execute the main upgrade script
--   3. Post-upgrade cleanup and commit
--
--   In pre-upgrade, we
--     1. set psql to "stop on error"
--     2. begin txn for the whole upgrade
--     3. create helper function
--
--  In the main execution script, it'll perform DDL/DML to transform the catalog
--  to the next version of the catalog
--
--  In the post-upgrade step, we
--     1. add PIN dependency to newly created catalog objects
--     2. drop the helper functions
--     3. commit the txn


-------------------------------------
-- Pre upgrade
--   set plsql to "stop on error"
--   begin txn
--   create temp helper routines
------------------------------------
\set ON_ERROR_STOP ON

-- We need plpgsql
create language plpgsql;

-- No need to run in a transaction, we always rollback thoroughly, plus, the
-- pg_compression table needs to be visible so that we can add rows to it.

-- Use this pl/pgsql function to execute DML on cat tab on all segs
create or replace function @gpupgradeschemaname@.catDML(stmt text) returns int as $$
declare
  dbid integer;
  role text;
begin
  SELECT INTO dbid gp_execution_dbid();
  EXECUTE 'SHOW gp_session_role' INTO role;
  IF dbid = 1 THEN
    IF role = 'dispatch' THEN
      PERFORM @gpupgradeschemaname@.catDML(stmt) FROM gp_dist_random('gp_id');
    END IF;
  END IF;

  execute stmt;
  return 1;
end;
$$ language 'plpgsql';

-- Use this pl/pgsql function to remove the default table privilege
create or replace function @gpupgradeschemaname@.removeDefaultPrivilege(tablenm text) returns int as $$
declare
  username name;
  stmt text;
begin
  select rolname into username from pg_authid where oid = 10;
  stmt := 'revoke all on table @gpupgradeschemaname@.' || tablenm || ' from ' || quote_ident(username);
  execute stmt;
  return 1;
end;
$$ language 'plpgsql';

-- Use this pl/pgsql function to add hawq_toolkit schema if not exist
create or replace function @gpupgradeschemaname@.enableHAWQToolkit() returns void as $$
begin
    if not exists (select 1 from @gpupgradeschemaname@.pg_namespace where nspname='hawq_toolkit') then
        CREATE SCHEMA hawq_toolkit;
        DROP SCHEMA IF EXISTS gp_toolkit;
        --------------------------------------------------------------------------------
        -- Greenplum Database
        -- Copyright (C) 2009, 2010 by Greenplum, Inc. All rights reserved.
        --
        -- hawq_toolkit %%JETPACK_VERSION%%
        --
        -- This software is subject to change without notice. It is furnished under a 
        -- license agreement, and may be used or copied only in accordance with the
        -- terms of that agreement. Upgrades are provided only at regularly scheduled 
        -- software release dates. No part of this file may be reproduced, transmitted, 
        -- or translated in any form or by any means, electronic, mechanical, manual, 
        -- optical, or otherwise without the prior written permission of Greenplum, Inc.
        --
        --------------------------------------------------------------------------------
        GRANT USAGE ON SCHEMA hawq_toolkit TO public;
        --------------------------------------------------------------------------------
        -- Auxiliary functions & views
        --------------------------------------------------------------------------------
        --------------------------------------------------------------------------------
        -- @view: 
        --        hawq_toolkit.__hawq_is_append_only
        --
        -- @doc:
        --        Determines if a table is an AOT; returns true if OID refers to an AOT,
        --        false if OID refers to a non-AOT relation; empty rowset if OID is invalid
        --        
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.__hawq_is_append_only
        AS
            SELECT
                pgc.oid AS iaooid,
                CASE 
                    WHEN pgao.relid IS NULL THEN false ELSE true
                END
                AS iaotype
            FROM 
                pg_catalog.pg_class pgc
                LEFT JOIN pg_catalog.pg_appendonly pgao ON (pgc.oid = pgao.relid);
        GRANT SELECT ON TABLE hawq_toolkit.__hawq_is_append_only TO public;
        --------------------------------------------------------------------------------
        -- @view: 
        --        hawq_toolkit.__hawq_fullname
        --
        -- @doc:
        --        Constructs fully qualified names
        --        
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.__hawq_fullname
        AS
            SELECT 
                pgc.oid AS fnoid,
                nspname AS fnnspname,
                relname AS fnrelname
            FROM 
                pg_catalog.pg_class pgc, 
                pg_catalog.pg_namespace pgn
            WHERE pgc.relnamespace = pgn.oid;
        GRANT SELECT ON TABLE hawq_toolkit.__hawq_fullname TO public;    
        --------------------------------------------------------------------------------
        -- @view: 
        --        hawq_toolkit.__hawq_user_namespaces
        --
        -- @doc:
        --        Shorthand for namespaces that contain user data
        --        
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.__hawq_user_namespaces
        AS
            SELECT 
                oid as aunoid,
                nspname as aunnspname
            FROM 
                pg_catalog.pg_namespace
            WHERE 
                nspname NOT LIKE 'pg_%'
            AND nspname <> 'hawq_toolkit'
            AND nspname <> 'information_schema';
        GRANT SELECT ON TABLE hawq_toolkit.__hawq_user_namespaces TO public;    
        --------------------------------------------------------------------------------
        -- @view: 
        --        hawq_toolkit.__hawq_user_tables
        --
        -- @doc:
        --        Shorthand for tables in user namespaces
        --        
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.__hawq_user_tables
        AS
            SELECT 
                fn.fnnspname as autnspname, 
                fn.fnrelname as autrelname, 
                relkind as autrelkind,
                reltuples as autreltuples,
                relpages as autrelpages,
                relacl as autrelacl,
                pgc.oid as autoid,
                pgc.reltoastrelid as auttoastoid,
                pgc.relstorage as autrelstorage
            FROM 
                pg_catalog.pg_class pgc,
                hawq_toolkit.__hawq_fullname fn
            WHERE pgc.relnamespace IN 
            (
                SELECT aunoid 
                FROM hawq_toolkit.__hawq_user_namespaces
            )
            AND pgc.relkind = 'r'
            AND pgc.oid = fn.fnoid;
        GRANT SELECT ON TABLE hawq_toolkit.__hawq_user_tables TO public;
        --------------------------------------------------------------------------------
        -- @view: 
        --        hawq_toolkit.__hawq_user_data_tables
        --
        -- @doc:
        --        Shorthand for tables in user namespaces that may hold data
        --        
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.__hawq_user_data_tables
        AS
            SELECT aut.*
            FROM 
                hawq_toolkit.__hawq_user_tables aut
            LEFT OUTER JOIN 
                pg_catalog.pg_partition pgp 
            ON aut.autoid = pgp.parrelid
            WHERE pgp.parrelid IS NULL;
        GRANT SELECT ON TABLE hawq_toolkit.__hawq_user_data_tables TO public;
        --------------------------------------------------------------------------------
        -- @view: 
        --        hawq_toolkit.__hawq_user_data_tables_readable
        --
        -- @doc:
        --        Shorthand for tables in user namespaces that may hold data and are 
        --        readable by current user
        --        
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.__hawq_user_data_tables_readable
        AS
            SELECT *
            FROM hawq_toolkit.__hawq_user_tables aut
            WHERE has_table_privilege(quote_ident(autnspname)||'.'||quote_ident(autrelname), 'select');
        GRANT SELECT ON TABLE hawq_toolkit.__hawq_user_data_tables_readable TO public;
        --------------------------------------------------------------------------------
        -- log-reading external tables and views
        --------------------------------------------------------------------------------
        --------------------------------------------------------------------------------
        -- @table: 
        --        hawq_toolkit.hawq_log_segment_ext
        --
        -- @doc:
        --        External table to read segment log; requires superuser privilege
        --        
        --------------------------------------------------------------------------------
        CREATE EXTERNAL WEB TABLE hawq_toolkit.__hawq_log_segment_ext
        (
            logtime timestamp with time zone,
            loguser text,
            logdatabase text,
            logpid text,
            logthread text,
            loghost text,
            logport text,
            logsessiontime timestamp with time zone,
            logtransaction int,
            logsession text,
            logcmdcount text,
            logsegment text,
            logslice text,
            logdistxact text,
            loglocalxact text,
            logsubxact text,
            logseverity text,
            logstate text,
            logmessage text,
            logdetail text,
            loghint text,
            logquery text,
            logquerypos int,
            logcontext text,
            logdebug text,
            logcursorpos int,
            logfunction text,
            logfile text,
            logline int,
            logstack text
        )
        EXECUTE E'cat $GP_SEG_DATADIR/pg_log/*.csv' 
        FORMAT 'CSV' (DELIMITER AS ',' NULL AS '' QUOTE AS '"');
        REVOKE ALL ON TABLE hawq_toolkit.__hawq_log_segment_ext FROM public;
        --------------------------------------------------------------------------------
        -- @table: 
        --        hawq_toolkit.hawq_log_master
        --
        -- @doc:
        --        External table to read the master log; requires superuser privilege
        --        
        --------------------------------------------------------------------------------
        CREATE EXTERNAL WEB TABLE hawq_toolkit.__hawq_log_master_ext
        (
            logtime timestamp with time zone,
            loguser text,
            logdatabase text,
            logpid text,
            logthread text,
            loghost text,
            logport text,
            logsessiontime timestamp with time zone,
            logtransaction int,
            logsession text,
            logcmdcount text,
            logsegment text,
            logslice text,
            logdistxact text,
            loglocalxact text,
            logsubxact text,
            logseverity text,
            logstate text,
            logmessage text,
            logdetail text,
            loghint text,
            logquery text,
            logquerypos int,
            logcontext text,
            logdebug text,
            logcursorpos int,
            logfunction text,
            logfile text,
            logline int,
            logstack text
        )
        EXECUTE E'cat $GP_SEG_DATADIR/pg_log/*.csv' ON MASTER
        FORMAT 'CSV' (DELIMITER AS ',' NULL AS '' QUOTE AS '"');
        REVOKE ALL ON TABLE hawq_toolkit.__hawq_log_master_ext FROM public;
        --------------------------------------------------------------------------------
        -- @view: 
        --        hawq_toolkit.hawq_log_system
        --
        -- @doc:
        --        View of segment and master logs
        --        
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.hawq_log_system 
        AS
            SELECT * FROM hawq_toolkit.__hawq_log_segment_ext
            UNION ALL
            SELECT * FROM hawq_toolkit.__hawq_log_master_ext
            ORDER BY logtime;
        REVOKE ALL ON TABLE hawq_toolkit.hawq_log_system FROM public;
        --------------------------------------------------------------------------------
        -- @view: 
        --        hawq_toolkit.hawq_log_database
        --
        -- @doc:
        --        Shorthand to view error logs of current database only;
        --        requires superuser privilege
        --        
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.hawq_log_database 
        AS
            SELECT * FROM hawq_toolkit.hawq_log_system
            WHERE logdatabase = current_database();
        REVOKE ALL ON TABLE hawq_toolkit.hawq_log_database FROM public;
        --------------------------------------------------------------------------------
        -- @view: 
        --        hawq_toolkit.hawq_log_master_concise
        --
        -- @doc:
        --        Shorthand to view most important columns of master log only;
        --        requires superuser privilege
        --        
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.hawq_log_master_concise
        AS
            SELECT 
                logtime
        --        ,loguser
                ,logdatabase
        --        ,logpid
        --        ,logthread
        --        ,loghost
        --        ,logport
        --        ,logsessiontime
        --        ,logtransaction
                ,logsession
                ,logcmdcount
        --        ,logsegment
        --        ,logslice
        --        ,logdistxact
        --        ,loglocalxact
        --        ,logsubxact
                ,logseverity
        --        ,logstate
                ,logmessage
        --        ,logdetail
        --        ,loghint
        --        ,logquery
        --        ,logquerypos
        --        ,logcontext
        --        ,logdebug
        --        ,logcursorpos
        --        ,logfunction
        --        ,logfile
        --        ,logline
        --        ,logstack
            FROM hawq_toolkit.__hawq_log_master_ext;
        REVOKE ALL ON TABLE hawq_toolkit.hawq_log_master_concise FROM public;
        --------------------------------------------------------------------------------
        -- @view: 
        --        hawq_toolkit.hawq_log_command_timings
        --
        -- @doc:
        --        list all commands together with first and last timestamp of logged 
        --        activity; requires superuser privilege
        --        
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.hawq_log_command_timings
        AS
            SELECT
                logsession, 
                logcmdcount, 
                logdatabase,
                loguser,
                logpid,
                MIN(logtime) AS logtimemin,
                MAX(logtime) AS logtimemax,
                MAX(logtime) - MIN(logtime) AS logduration
            FROM 
                hawq_toolkit.__hawq_log_master_ext 
            WHERE 
                logsession IS NOT NULL
                AND logcmdcount IS NOT NULL
                AND logdatabase IS NOT NULL
            GROUP BY 1,2,3,4,5;
        REVOKE ALL ON TABLE hawq_toolkit.hawq_log_command_timings FROM public;
        --------------------------------------------------------------------------------
        -- detection of missing stats
        --------------------------------------------------------------------------------
        --------------------------------------------------------------------------------
        -- @view: 
        --        hawq_toolkit.hawq_stats_missing
        --
        -- @doc:
        --        List all tables with no or insufficient stats; includes empty tables
        --        
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.hawq_stats_missing
        AS
            SELECT 
                aut.autnspname as smischema,
                aut.autrelname as smitable,
                CASE WHEN aut.autrelpages = 0 OR aut.autreltuples = 0 THEN false ELSE true END AS smisize,
                attcnt AS smicols,
                COALESCE(stacnt, 0) AS smirecs
            FROM 
                hawq_toolkit.__hawq_user_tables aut
                
                JOIN
                (
                    SELECT attrelid, count(*) AS attcnt
                    FROM pg_catalog.pg_attribute
                    WHERE attnum > 0
                    GROUP BY attrelid
                ) attrs 
                ON aut.autoid = attrelid
                
                LEFT OUTER JOIN
                (
                    SELECT starelid, count(*) AS stacnt
                    FROM pg_catalog.pg_statistic
                    GROUP BY starelid
                ) bar 
                ON aut.autoid = starelid
            WHERE aut.autrelkind = 'r'
            AND (aut.autrelpages = 0 OR aut.autreltuples = 0) OR (stacnt IS NOT NULL AND attcnt > stacnt);
        GRANT SELECT ON TABLE hawq_toolkit.hawq_stats_missing TO public;
        --------------------------------------------------------------------------------
        -- @view: 
        --              hawq_toolkit.hawq_size_of_index
        --
        -- @doc:
        --              Calculates index sizes
        --              
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.hawq_size_of_index
        AS
            SELECT
                soi.soioid            AS soioid,
                soi.soitableoid        AS soitableoid,
                soi.soisize            AS soisize,
                fnidx.fnnspname     AS soiindexschemaname,
                fnidx.fnrelname     AS soiindexname,
                fntbl.fnnspname     AS soitableschemaname,
                fntbl.fnrelname     AS soitablename
            FROM
                (SELECT 
                    pgi.indexrelid                              AS soioid,
                    pgi.indrelid                                AS soitableoid, 
                    pg_catalog.pg_relation_size(pgi.indexrelid) AS soisize
                FROM pg_catalog.pg_index pgi
            
                JOIN hawq_toolkit.__hawq_user_data_tables_readable ut 
                ON (pgi.indrelid = ut.autoid)
                ) AS soi
                
            JOIN hawq_toolkit.__hawq_fullname fnidx 
            ON (soi.soioid = fnidx.fnoid)
            
            JOIN hawq_toolkit.__hawq_fullname fntbl
            ON (soi.soitableoid = fntbl.fnoid)
            ;
        GRANT SELECT ON TABLE hawq_toolkit.hawq_size_of_index TO public;
        --------------------------------------------------------------------------------
        -- @view: 
        --              hawq_toolkit.hawq_size_of_table_disk
        --
        -- @doc:
        --              Calculates on-disk table size
        --              
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.hawq_size_of_table_disk
        AS
            SELECT
                sotd.sotdoid                AS sotdoid,
                sotd.sotdsize                AS sotdsize,
                sotd.sotdtoastsize            AS sotdtoastsize,
                sotd.sotdadditionalsize        AS sotdadditionalsize,
                fn.fnnspname                 AS sotdschemaname,
                fn.fnrelname                 AS sotdtablename
            FROM
                (SELECT 
                    autoid                              AS sotdoid, 
                    pg_catalog.pg_relation_size(autoid) AS sotdsize,
                    CASE
                        WHEN auttoastoid > 0
                        THEN pg_catalog.pg_total_relation_size(auttoastoid)
                        ELSE 0
                    END 
                    AS sotdtoastsize,
                    CASE 
                        WHEN ao.segrelid IS NOT NULL AND ao.segrelid > 0
                        THEN pg_total_relation_size(ao.segrelid)
                        ELSE 0
                    END
                    + 
                    CASE 
                        WHEN ao.blkdirrelid IS NOT NULL AND ao.blkdirrelid > 0
                        THEN pg_total_relation_size(ao.blkdirrelid)
                        ELSE 0
                    END
                    AS sotdadditionalsize
                FROM 
                    (SELECT * 
                     FROM hawq_toolkit.__hawq_user_data_tables_readable 
                     WHERE autrelstorage != 'x'
                    ) AS udtr
                    
                LEFT JOIN pg_catalog.pg_appendonly ao
                ON (udtr.autoid = ao.relid)
                ) AS sotd
                
            JOIN hawq_toolkit.__hawq_fullname fn 
            ON (sotd.sotdoid = fn.fnoid)
            ;
        GRANT SELECT ON TABLE hawq_toolkit.hawq_size_of_table_disk TO public;
        --------------------------------------------------------------------------------
        -- @view: 
        --              hawq_toolkit.hawq_size_of_table_uncompressed
        --
        -- @doc:
        --              Calculates uncompressed table size for AO tables, for heap
        --              tables shows disk size
        --              
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.hawq_size_of_table_uncompressed
        AS
            SELECT
                sotu.sotuoid    AS sotuoid,
                sotu.sotusize    AS sotusize,
                fn.fnnspname     AS sotuschemaname,
                fn.fnrelname     AS sotutablename
            FROM
                (SELECT 
                    sotd.sotdoid AS sotuoid, 
                    CASE 
                        WHEN iao.iaotype 
                        THEN 
                            CASE 
                                WHEN pg_catalog.pg_relation_size(sotd.sotdoid) = 0 
                                THEN 0
                                ELSE pg_catalog.pg_relation_size(sotd.sotdoid) * 
                                        CASE
                                            WHEN pg_catalog.get_ao_compression_ratio(sotd.sotdoid) = -1
                                            THEN NULL
                                            ELSE pg_catalog.get_ao_compression_ratio(sotd.sotdoid)
                                        END
                            END
                        ELSE sotd.sotdsize
                    END +
                    sotd.sotdtoastsize +
                    sotd.sotdadditionalsize
                    AS sotusize 
                FROM hawq_toolkit.hawq_size_of_table_disk sotd
            
                JOIN hawq_toolkit.__hawq_is_append_only iao 
                ON (sotd.sotdoid = iao.iaooid)
                ) AS sotu
                
            JOIN hawq_toolkit.__hawq_fullname fn 
            ON (sotu.sotuoid = fn.fnoid)
            ;
        REVOKE ALL ON TABLE hawq_toolkit.hawq_size_of_table_uncompressed FROM public;
        --------------------------------------------------------------------------------
        -- @view: 
        --              hawq_toolkit.hawq_table_indexes
        --
        -- @doc:
        --              Shows indexes that belong to a table
        --              
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.hawq_table_indexes 
        AS
            SELECT
                ti.tireloid         AS tireloid,
                ti.tiidxoid         AS tiidxoid,
                fntbl.fnnspname        AS titableschemaname,
                fntbl.fnrelname     AS titablename,
                fnidx.fnnspname     AS tiindexschemaname,
                fnidx.fnrelname     AS tiindexname
            FROM    
                (SELECT 
                    pgc.oid  AS tireloid, 
                    pgc2.oid AS tiidxoid
                FROM pg_catalog.pg_class pgc
            
                JOIN pg_catalog.pg_index pgi 
                ON (pgc.oid = pgi.indrelid)
            
                JOIN pg_catalog.pg_class pgc2 
                ON (pgi.indexrelid = pgc2.oid)
            
                JOIN hawq_toolkit.__hawq_user_data_tables_readable udt
                ON (udt.autoid = pgc.oid)
                ) as ti
            JOIN hawq_toolkit.__hawq_fullname fntbl 
            ON (ti.tireloid = fntbl.fnoid)
            JOIN hawq_toolkit.__hawq_fullname fnidx
            ON (ti.tiidxoid = fnidx.fnoid)
            ;
          
        GRANT SELECT ON TABLE hawq_toolkit.hawq_table_indexes TO public;
          
        --------------------------------------------------------------------------------
        -- @view: 
        --              hawq_toolkit.hawq_size_of_all_table_indexes
        --
        -- @doc:
        --              Calculates total size of all indexes on a table
        --              
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.hawq_size_of_all_table_indexes
        AS
            SELECT 
                soati.soatioid        AS soatioid,
                soati.soatisize        AS soatisize,
                fn.fnnspname         AS soatischemaname,
                fn.fnrelname         AS soatitablename
            FROM 
                (SELECT 
                    tireloid                                   AS soatioid, 
                    sum(pg_catalog.pg_relation_size(tiidxoid)) AS soatisize
                FROM 
                    hawq_toolkit.hawq_table_indexes ti
                GROUP BY 
                    soatioid
                ) AS soati
                
            JOIN hawq_toolkit.__hawq_fullname fn 
            ON (soati.soatioid = fn.fnoid)
            ;
        GRANT SELECT ON hawq_toolkit.hawq_size_of_all_table_indexes TO public;
        --------------------------------------------------------------------------------
        -- @view: 
        --              hawq_toolkit.hawq_size_of_table_and_indexes_disk
        --
        -- @doc:
        --              Calculates table disk size and index disk size
        --              
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.hawq_size_of_table_and_indexes_disk
        AS
            SELECT
                sotaid.sotaidoid        AS sotaidoid,
                sotaid.sotaidtablesize    AS sotaidtablesize,
                sotaid.sotaididxsize    AS sotaididxsize,
                fn.fnnspname             AS sotaidschemaname,
                fn.fnrelname             AS sotaidtablename
            FROM
                (SELECT 
                    sotd.sotdoid            AS sotaidoid, 
                    sotd.sotdsize + 
                    sotd.sotdtoastsize + 
                    sotd.sotdadditionalsize AS sotaidtablesize, 
                    CASE 
                        WHEN soati.soatisize IS NULL THEN 0 
                        ELSE soati.soatisize
                    END 
                    AS sotaididxsize
                FROM hawq_toolkit.hawq_size_of_table_disk sotd
            
                LEFT JOIN hawq_toolkit.hawq_size_of_all_table_indexes soati
                ON (sotd.sotdoid = soati.soatioid)
                ) AS sotaid
            
            JOIN hawq_toolkit.__hawq_fullname fn 
            ON (sotaid.sotaidoid = fn.fnoid)
            ;
        GRANT SELECT ON TABLE hawq_toolkit.hawq_size_of_table_and_indexes_disk TO public;
        --------------------------------------------------------------------------------
        -- @view: 
        --              hawq_toolkit.hawq_size_of_table_and_indexes_licensing
        --
        -- @doc:
        --              Calculates table and indexes size for licensing purposes
        --              
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.hawq_size_of_table_and_indexes_licensing
        AS
            SELECT
                sotail.sotailoid                    AS sotailoid,
                sotail.sotailtablesizedisk            AS sotailtablesizedisk,
                sotail.sotailtablesizeuncompressed    AS sotailtablesizeuncompressed,
                sotail.sotailindexessize            AS sotailindexessize,
                fn.fnnspname                         AS sotailschemaname,
                fn.fnrelname                         AS sotailtablename
            FROM
                (SELECT 
                    sotu.sotuoid           AS sotailoid,
                    sotaid.sotaidtablesize AS sotailtablesizedisk, 
                    sotu.sotusize          AS sotailtablesizeuncompressed,
                    sotaid.sotaididxsize   AS sotailindexessize
                FROM hawq_toolkit.hawq_size_of_table_uncompressed sotu
            
                JOIN hawq_toolkit.hawq_size_of_table_and_indexes_disk sotaid
                ON (sotu.sotuoid = sotaid.sotaidoid)
                ) AS sotail
                
            JOIN hawq_toolkit.__hawq_fullname fn 
            ON (sotail.sotailoid = fn.fnoid)
            ;
        REVOKE ALL ON TABLE hawq_toolkit.hawq_size_of_table_and_indexes_licensing FROM public;
        --------------------------------------------------------------------------------
        -- @view:
        --              hawq_toolkit.hawq_size_of_partition_and_indexes_disk
        --
        -- @doc:
        --              Calculates partition table disk size and partition indexes disk size
        --
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.hawq_size_of_partition_and_indexes_disk
        AS
            SELECT
                sopaid.sopaidparentoid                AS sopaidparentoid,
                sopaid.sopaidpartitionoid            AS sopaidpartitionoid,
                sopaid.sopaidpartitiontablesize        AS sopaidpartitiontablesize,
                sopaid.sopaidpartitionindexessize    AS sopaidpartitionindexessize,
                fnparent.fnnspname                     AS sopaidparentschemaname,
                fnparent.fnrelname                     AS sopaidparenttablename,
                fnpart.fnnspname                     AS sopaidpartitionschemaname,
                fnpart.fnrelname                     AS sopaidpartitiontablename
            FROM
                (SELECT
                    pgp.parrelid                 AS sopaidparentoid,
                    pgpr.parchildrelid           AS sopaidpartitionoid,
                    sotd.sotdsize + 
                    sotd.sotdtoastsize + 
                    sotd.sotdadditionalsize      AS sopaidpartitiontablesize, 
                    COALESCE(soati.soatisize, 0) AS sopaidpartitionindexessize
                FROM pg_catalog.pg_partition pgp
            
                JOIN pg_partition_rule pgpr ON (pgp.oid = pgpr.paroid)
            
                JOIN hawq_toolkit.hawq_size_of_table_disk sotd 
                ON (sotd.sotdoid = pgpr.parchildrelid)
            
                LEFT JOIN hawq_toolkit.hawq_size_of_all_table_indexes soati 
                ON (soati.soatioid = pgpr.parchildrelid)
                ) AS sopaid
                
            JOIN hawq_toolkit.__hawq_fullname fnparent 
            ON (sopaid.sopaidparentoid = fnparent.fnoid)
            
            JOIN hawq_toolkit.__hawq_fullname fnpart 
            ON (sopaid.sopaidpartitionoid = fnpart.fnoid)
            ;
        GRANT SELECT ON TABLE hawq_toolkit.hawq_size_of_partition_and_indexes_disk TO public;
        --------------------------------------------------------------------------------
        -- @view: 
        --              hawq_toolkit.hawq_size_of_schema_disk
        --
        -- @doc:
        --              Calculates user schema sizes in current database
        --              
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.hawq_size_of_schema_disk
        AS
            SELECT 
                un.aunnspname                             AS sosdnsp, 
                COALESCE(sum(sotaid.sotaidtablesize), 0)  AS sosdschematablesize, 
                COALESCE(sum(sotaid.sotaididxsize)  , 0)  AS sosdschemaidxsize
            FROM hawq_toolkit.hawq_size_of_table_and_indexes_disk sotaid
            JOIN hawq_toolkit.__hawq_fullname fn 
            ON (sotaid.sotaidoid = fn.fnoid)
            
            RIGHT JOIN hawq_toolkit.__hawq_user_namespaces un
            ON (un.aunnspname = fn.fnnspname)
            GROUP BY 
                un.aunnspname;
        GRANT SELECT ON hawq_toolkit.hawq_size_of_schema_disk TO public;
        --------------------------------------------------------------------------------
        -- @view: 
        --              hawq_toolkit.hawq_size_of_database
        --
        -- @doc:
        --              Calculates user database sizes
        --              
        --------------------------------------------------------------------------------
        CREATE VIEW hawq_toolkit.hawq_size_of_database
        AS
            SELECT 
                datname                          AS sodddatname, 
                pg_catalog.pg_database_size(oid) AS sodddatsize
            FROM 
                pg_catalog.pg_database
            WHERE
                datname <> 'template0' 
            AND datname <> 'template1'
            AND datname <> 'postgres';
                
        GRANT SELECT ON TABLE hawq_toolkit.hawq_size_of_database TO public;
    end if;
end;
$$ language 'plpgsql';

-------------------------------------
-- Execute the main upgrade script
-------------------------------------
\set upg2script `echo $GPHOME/share/postgresql/upgrade/upg2_catupgrade_12.sql`
\i :upg2script

----------------------------------------
-- Post upgrade step
--   add PIN dependency to newly created catalog objects
--   drop temp helper routine
--   commit the txn
----------------------------------------
select @gpupgradeschemaname@.catDML(
'INSERT INTO @gpupgradeschemaname@.pg_depend SELECT 0,0,0, tableoid,oid,0, ''p'' FROM @gpupgradeschemaname@.pg_proc
        where (tableoid,oid) not in (Select refclassid, refobjid from @gpupgradeschemaname@.pg_depend where deptype = ''p'')
          and oid < 10000');

select @gpupgradeschemaname@.catDML(
'INSERT INTO @gpupgradeschemaname@.pg_depend SELECT 0,0,0, tableoid,oid,0, ''p'' FROM @gpupgradeschemaname@.pg_class
        where (tableoid,oid) not in (Select refclassid, refobjid from @gpupgradeschemaname@.pg_depend where deptype = ''p'')
          and oid < 10000');

select @gpupgradeschemaname@.catDML(
'INSERT INTO @gpupgradeschemaname@.pg_depend SELECT 0,0,0, tableoid,oid,0, ''p'' FROM @gpupgradeschemaname@.pg_type
        where (tableoid,oid) not in (Select refclassid, refobjid from @gpupgradeschemaname@.pg_depend where deptype = ''p'')
          and oid < 10000');

select @gpupgradeschemaname@.catDML(
'INSERT INTO @gpupgradeschemaname@.pg_depend SELECT 0,0,0, tableoid,oid,0, ''p'' FROM @gpupgradeschemaname@.pg_operator
        where (tableoid,oid) not in (Select refclassid, refobjid from @gpupgradeschemaname@.pg_depend where deptype = ''p'')
          and oid < 10000'
);
select @gpupgradeschemaname@.catDML(
'INSERT INTO @gpupgradeschemaname@.pg_depend SELECT 0,0,0, tableoid,oid,0, ''p'' FROM @gpupgradeschemaname@.pg_cast
        where (tableoid,oid) not in (Select refclassid, refobjid from @gpupgradeschemaname@.pg_depend where deptype = ''p'')
          and oid < 10000'
);

drop function @gpupgradeschemaname@.catDML(stmt text);
drop function @gpupgradeschemaname@.removeDefaultPrivilege(tablenm text);
drop function @gpupgradeschemaname@.enableHAWQToolkit();
\unset ON_ERROR_STOP
